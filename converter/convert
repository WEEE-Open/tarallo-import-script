#!/usr/bin/php
<?php
chdir(__DIR__);
if(!chdir('../tarallo-backend')) {
	echo 'Cannot change directory' . PHP_EOL;
};
/** @noinspection PhpIncludeInspection */
include 'vendor/autoload.php';

use WEEEOpen\Tarallo\Server\Database\Database;
use WEEEOpen\Tarallo\Server\Feature;
use WEEEOpen\Tarallo\Server\Item;

define('DBNAME', 'tarallo');
// That's not the production server, OBVIOUSLY. This is run on testing, then database will be exported and imported again in production.
$db = new Database('root', 'root', 'mysql:host=127.0.0.1;port=3307');
$check = 0; // How many items should be manually checked

function stop($error, $line) {
	echo $error . PHP_EOL;
	echo 'Line that caused the error:' . PHP_EOL;
	echo PHP_EOL . $line . PHP_EOL;
	exit(1);
}

function notice($message, $line) {
	echo $message . PHP_EOL;
	echo 'Line: ';
	echo $line . PHP_EOL;
}

function nuke($line, $expected) {
	$pieces = explode('|', $line);
	if(count($pieces) !== $expected) {
		stop('Expected ' . $expected . ' pieces, found ' . count($pieces), $line);
	}
	//if(trim($pieces[0]) === '') {
	//	notice('Skipping item without code', $line);
	//	return null;
	//}
	return $pieces;
}

$codes = [];
function isduplicate($code, $line) {
	global $codes;
	if(isset($codes[$code])) {
		stop("Duplicate code, same as:\n" . $codes[$code], $line);
	} else {
		$codes[$code] = $line;
	}
}

function working(Item $item, $working, $line) {
	if($working !== '') {
		switch($working) {
			case 'Y':
				$item->addFeature(new Feature('working', 'yes'));
				break;
			case 'N':
				$item->addFeature(new Feature('working', 'no'));
				break;
			case 'M':
				$item->addFeature(new Feature('working', 'maybe'));
				break;
			default:
				stop('Working state ' . $working . ' has no meaningful meaning [sic]', $line);
		}
	}
}

$owners = [];
function own(
	Item $item,
	$owner,
	/** @noinspection PhpUnusedParameterInspection */
	$line
) {
	$ownerOriginal = $owner;
	$owner = preg_replace("/[^a-z]/", "", strtolower(trim($owner)));
	if($owner === 'areait' || $owner === 'polito') {
		$item->addFeature(new Feature('owner', 'Area IT'));
	} else if($owner === 'disat') {
		$item->addFeature(new Feature('owner', 'DISAT'));
	} else if($owner === 'nexa') {
		$item->addFeature(new Feature('owner', 'Nexa'));
	} else if(strlen($owner) > 0 && $owner{0} === 'l') {
		$item->addFeature(new Feature('owner', trim($ownerOriginal)));
		if($item->getCode() === 'SCHIFOMACCHINA') {
			$item->addFeature(new Feature('restrictions', 'in-use'));
		} else {
			$item->addFeature(new Feature('restrictions', 'loan'));
		}
	} else if($owner === 'weee') {
		$item->addFeature(new Feature('owner', 'WEEE Open'));
		$item->addFeature(new Feature('restrictions', 'bought'));
	} else if($owner === '') {
		$item->addFeature(new Feature('owner', '???'));
	} else {
		$item->addFeature(new Feature('owner', trim($ownerOriginal)));
		$item->addFeature(new Feature('restrictions', 'other'));
	}
	global $owners;
	if(!isset($owners[$owner])) {
		$owners[$owner] = 1;
	} else {
		$owners[$owner]++;
	}
}

$polito = (new Item('Polito'))->addFeature(new Feature('type', 'location'));
$chernobyl = (new Item('Chernobyl'))->addFeature(new Feature('type', 'location'));
$mrf = (new Item('Mirafiori'))->addFeature(new Feature('type', 'location'));
$armadiol = (new Item('ArmadioL'))->addFeature(new Feature('type', 'location'));
$armadior = (new Item('ArmadioR'))->addFeature(new Feature('type', 'location'));
$armadios = (new Item('ArmadioS'))->addFeature(new Feature('type', 'location'));
$armadiod = (new Item('ArmadioD'))->addFeature(new Feature('type', 'location'));
$scatolaRAM = (new Item('BrokenRamBox'))->addFeature(new Feature('type', 'location'));
$tavolo = (new Item('Tavolo'))->addFeature(new Feature('type', 'location'));
$groot = (new Item('Groot'))->addFeature(new Feature('type', 'location'));
$rotonda = (new Item('Rotonda'))->addFeature(new Feature('type', 'location'));
$sottoiltavolo = $sottoaltavolo = (new Item('UnderTable'))->addFeature(new Feature('type', 'location'));
$zonablu = (new Item('ZonaBlu'))->addFeature(new Feature('type', 'location'));
$zonarossa = (new Item('ZonaRossa'))->addFeature(new Feature('type', 'location'));
$zonaground = (new Item('ZonaGround'))->addFeature(new Feature('type', 'location'));
$davanzale = (new Item('Windowsill'))->addFeature(new Feature('type', 'location'));

$polito->addContent($chernobyl)->addContent($mrf);
$chernobyl->addContent($armadiol)->addContent($armadior)->addContent($armadios)->addContent($armadiod)->addContent($tavolo)->addContent($groot)->addContent($rotonda)->addContent($zonablu)->addContent($zonarossa)->addContent($zonaground)->addContent($davanzale);
$armadior->addContent($scatolaRAM);
$tavolo->addContent($sottoaltavolo);
$otherContainers = []; // Cases contain every kind of item, motherboards "contain" RAM sticks and CPUs

function placeinto(Item $item, $parent, $line, $container = false) {
	global $otherContainers;
	if($container) {
		if(isset($container[$item->getCode()])) {
			stop('Duplicate code', $line);
		}
		$otherContainers[$item->getCode()] = $item;
	}
	$where = preg_replace("/[^a-z]/", "", strtolower($parent));
	switch($where) {
		case 'zonablu':
		case 'zonarossa':
		case 'zonaground':
		case 'groot':
		case 'tavolo':
		case 'rotonda':
		case 'davanzale':
		case 'armadiol':
		case 'armadior':
		case 'armadios':
		case 'armadiod':
		case 'chernobyl':
		case 'sottoiltavolo':
		case 'sottoaltavolo':
			global $$where;
			/** @noinspection PhpUndefinedMethodInspection */
			$$where->addContent($item);

			return;
		case 'zonamrf':
		case 'mirafiori':
			global $mrf;
			/** @noinspection PhpUndefinedMethodInspection */
			$mrf->addContent($item);

			return;
		case 'perso':
		case 'persa':
		case 'duplicato':
			global $chernobyl;
			/** @noinspection PhpUndefinedMethodInspection */
			$chernobyl->addContent($item);

			return;
	}
	if(strstr($where, 'scatolaramrotte') > -1) {
		global $scatolaRAM;
		/** @noinspection PhpUndefinedMethodInspection */
		$scatolaRAM->addContent($item);

		return;
	}
	if(strstr($where, 'armadiol') > -1) {
		global $armadiol;
		/** @noinspection PhpUndefinedMethodInspection */
		$armadiol->addContent($item);

		return;
	}
	if(strstr($where, 'armadiod') > -1) {
		global $armadiod;
		/** @noinspection PhpUndefinedMethodInspection */
		$armadiod->addContent($item);

		return;
	}
	// TODO: handle this correctly
	if(strstr($where, 'computer') > -1) {
		global $armadiol;
		/** @noinspection PhpUndefinedMethodInspection */
		$armadiol->addContent($item);

		return;
	}
	$parent = trim($parent);
	if(isset($otherContainers[$parent])) {
		/** @noinspection PhpUndefinedMethodInspection */
		$otherContainers[$parent]->addContent($item);

		return;
	}
	stop('Unknown location: ' . $parent, $line);

	return null;
}

function colorify(Item $item, $color, $line) {
	$color = strtolower(trim($color));
	switch($color) {
		case 'bianco':
			$item->addFeature(new Feature('color', 'white'));

			return;
		case 'nero':
			$item->addFeature(new Feature('color', 'black'));

			return;
		case 'grigio':
			$item->addFeature(new Feature('color', 'grey'));

			return;
		case 'grigio chiaro':
			$item->addFeature(new Feature('color', 'lightgrey'));

			return;
		case 'blu':
			$item->addFeature(new Feature('color', 'blue'));

			return;
		case 'verde':
			$item->addFeature(new Feature('color', 'green'));

			return;
		case 'rosso':
			$item->addFeature(new Feature('color', 'red'));

			return;
		case 'ingiallito':
			$item->addFeature(new Feature('color', 'yellowed'));

			return;
		case 'trasparente scuro':
			$item->addFeature(new Feature('color', 'transparent-dark'));

			return;
		case 'azzurro':
			$item->addFeature(new Feature('color', 'lightblue'));

			return;
		case 'rosa':
			$item->addFeature(new Feature('color', 'pink'));

			return;
		case 'arancione':
			$item->addFeature(new Feature('color', 'orange'));

			return;
		case 'marrone':
			$item->addFeature(new Feature('color', 'brown'));

			return;
		case 'grigio scuro':
			$item->addFeature(new Feature('color', 'darkgrey'));

			return;
		case 'viola':
			$item->addFeature(new Feature('color', 'violet'));

			return;
		case 'giallo':
			$item->addFeature(new Feature('color', 'yellow'));

			return;
		case 'dorato':
			$item->addFeature(new Feature('color', 'golden'));

			return;
	}
	stop('Unknown color: ' . $color, $line);
}

$psufixupconnectors = [];
$psufixupformfactor = [];

function psupls(Item $in, $psustring, $line) {
	global $psufixupconnectors, $psufixupformfactor;

	switch(trim($psustring)) {
		case 'ATX 20 + AUX':
			$mobopin = 'atx-20pin-aux';
			$cpupin = 'none';
			$formfactor = 'atx';
			$powerconnector = 'c13';
			break;
		case 'ATX 20 + 4 + AUX':
			$mobopin = 'atx-20pin-aux';
			$cpupin = '4pin';
			$formfactor = 'atx';
			$powerconnector = 'c13';
			break;
		case 'ATX 20 + 4':
			$mobopin = 'atx-20pin';
			$cpupin = '4pin';
			$formfactor = 'atx';
			$powerconnector = 'c13';
			break;
		case 'ATX 24 + 4':
			$mobopin = 'atx-24pin';
			$cpupin = '4pin';
			$formfactor = 'atx';
			$powerconnector = 'c13';
			break;
		case 'ATX 24 + 8':
			$mobopin = 'atx-24pin';
			$cpupin = '8pin';
			$formfactor = 'atx';
			$powerconnector = 'c13';
			break;
		case 'CFX 24 + 4':
			$mobopin = 'atx-24pin';
			$cpupin = '4pin';
			$formfactor = 'cfx';
			$powerconnector = 'c13';
			break;
		case 'CFX 24 + 6 (HP)': // 2 black, 2 yellow, 1 purple, 1 blue
			$mobopin = 'atx-24pin';
			$cpupin = '6pin-hp';
			$formfactor = 'cfx';
			$powerconnector = 'c13';
			break;
			break;
		case 'CFX 24 mini + 6 (HP brown)': // 2 black, 2 yellow, 2 brown. But I suspect it's the same as above...
			$mobopin = 'atx-24pin-mini';
			$cpupin = '6pin-hp-brown';
			$formfactor = 'cfx';
			$powerconnector = 'c13';
			break;
		case 'ATX 24 + 6?':
			// I have no idea what this is. HP uses a proprietary 6 pin connector sometimes, but this is a Dell...
			$mobopin = 'atx-24pin';
			$cpupin = '6pin';
			$formfactor = 'atx';
			$powerconnector = 'c19';
			break;
		case 'LFX 20 + 4':
			$mobopin = 'atx-20pin';
			$cpupin = '4pin';
			$formfactor = 'lfx';
			$powerconnector = 'c13';
			break;
		case 'LFX 24 + 4':
			$mobopin = 'atx-24pin';
			$cpupin = '4pin';
			$formfactor = 'lfx';
			$powerconnector = 'c13';
			break;
		case 'ATX 20':
			$mobopin = 'atx-20pin';
			$cpupin = 'none';
			$formfactor = 'atx';
			$powerconnector = 'c13';
			break;
		case 'SFX-L 24 + 4':
			// An hot (and apparently not covered by any public specification) format for modern slim PCs, whatever that means.
			// Also, we have a PSU from 2009 with that exact form factor, so it's not really that modern.
			$mobopin = 'atx-24pin';
			$cpupin = '4pin';
			$formfactor = 'sfx-l';
			$powerconnector = 'c13';
			break;
		case 'SFX-topfan 20 + 4':
			$mobopin = 'atx-20pin';
			$cpupin = '4pin';
			$formfactor = 'sfx-topfan';
			$powerconnector = 'c13';
			break;
		case 'Proprietario interno':
			$mobopin = 'proprietary';
			$cpupin = 'proprietary';
			$formfactor = 'proprietary';
			$powerconnector = 'c13';
			break;
		case 'Barrel':
			$mobopin = null;
			$cpupin = null;
			$formfactor = null;
			$powerconnector = 'barrel';
			break;
		case 'Mini USB':
			$mobopin = null;
			$cpupin = null;
			$formfactor = null;
			$powerconnector = 'miniusb';
			break;
		case 'Dell DA-2':
			$mobopin = null;
			$cpupin = null;
			$formfactor = null;
			$powerconnector = 'da-2';
			break;
		case 'Proprietario esterno':
			$mobopin = null;
			$cpupin = null;
			$formfactor = null;
			$powerconnector = 'proprietary';
			break;
		default:
			stop('Uknown internal PSU type: ' . $psustring, $line);
	}

	/** @noinspection PhpUndefinedVariableInspection */
	$cpupin === null ?: $in->addFeature(new Feature('psu-connector-cpu', $cpupin));
	/** @noinspection PhpUndefinedVariableInspection */
	$mobopin === null ?: $in->addFeature(new Feature('psu-connector-motherboard', $mobopin));
	/** @noinspection PhpUndefinedVariableInspection */
	$formfactor === null ?: $in->addFeature(new Feature('psu-form-factor', $formfactor));
	/** @noinspection PhpUndefinedVariableInspection */
	$powerconnector === null ?: $in->addFeature(new Feature('power-connector', $powerconnector));

	// Parse cases and motherboards before PSUs
	// so add PSU connector types to motherboards
	if(isset($psufixupconnectors[$in->getCode()])) {
		if($cpupin === null || $mobopin === null) {
			stop('Cannot fix(up) ' . $in->getCode() . ': no cpupin/mobopin', $line);
		}
		if($mobopin === 'atx-20pin-aux') {
			$mobopin = 'atx-20pin'; // none of our motherboards actually need the AUX connector
		}
		/** @noinspection PhpUndefinedMethodInspection */
		$psufixupconnectors[$in->getCode()]->addFeature(new Feature('psu-connector-cpu', $cpupin));
		/** @noinspection PhpUndefinedMethodInspection */
		$psufixupconnectors[$in->getCode()]->addFeature(new Feature('psu-connector-motherboard', $mobopin));
	}

	if(isset($psufixupformfactor[$in->getCode()])) {
		if($formfactor === null) {
			stop('Cannot fix(up) ' . $in->getCode() . ': no formfactor', $line);
		}
		/** @noinspection PhpUndefinedMethodInspection */
		$psufixupformfactor[$in->getCode()]->addFeature(new Feature('psu-form-factor', $formfactor));
	}
}

$files = ['case', 'monitor', 'ram', 'hdd', 'odd', 'input', 'cards', 'psu', 'fdd', 'other'];
$files = array_flip($files);
foreach($files as $file => $useless) {
	$handle = fopen('..' . DIRECTORY_SEPARATOR . 'converter' . DIRECTORY_SEPARATOR . $file . '.csv', "r");
	if(!$handle) {
		echo 'Cannot open ' . $file . '.csv';
		exit(1);
	}
	$files[$file] = $handle;
}

// Codes generation
$cpuid = 0;
$moboid = 0;
$netids = [];

// Arrival date, day that the item was added to the inventory
// All added at the end, since they go in the audit table
$creation = [];

// First line is a "super-header"
$discard = fgets($files['case']);
unset($discard);

// Then there's the normal header
$header = fgets($files['case']);
$header = explode('|', $header);
// Whatever, it's not really needed...

$counter = 0;
while(($line = fgets($files['case'])) !== false) {
	$pieces = nuke($line, count($header));

	if(substr(trim($pieces[0]), 0, 1) === '(') {
		continue;
	}

	try {
		$in = new Item(trim($pieces[0]));
	} catch(\InvalidArgumentException $e) {
		stop('Invalid code', $line);
	}
	isduplicate($in->getCode(), $line);
	$in->addFeature(new Feature('type', 'case'));
	$otherContainers[$in->getCode()] = $in;

	trim($pieces[1]) === '' ?: $in->addFeature(new Feature('cib', trim($pieces[1])));
	trim($pieces[2]) === '' ?: $in->addFeature(new Feature('cib-old', trim($pieces[2])));
	trim($pieces[3]) === '' ?: $in->addFeature(new Feature('other-code', trim($pieces[3])));
	trim($pieces[4]) === '' ?: $in->addFeature(new Feature('os-license-version', trim($pieces[4])));
	trim($pieces[5]) === '' ?: $in->addFeature(new Feature('os-license-code', trim($pieces[5])));
	trim($pieces[6]) === '' ?: $in->addFeature(new Feature('brand', trim($pieces[6])));
	trim($pieces[7]) === '' ?: $in->addFeature(new Feature('model', trim($pieces[7])));
	trim($pieces[8]) === '' ?: $in->addFeature(new Feature('usb-ports-n', (int) trim($pieces[8])));
	working($in, $pieces[9], $line);

	$mobo = new Item('B' . ++$moboid);
	// TODO: set RAM type and form factor (or don't, we'll use Products later)
	isduplicate($mobo->getCode(), $line);
	$creation[$mobo->getCode()] = $pieces[42];
	$otherContainers[$mobo->getCode()] = $mobo;
	$mobo->addFeature(new Feature('type', 'motherboard'));
	$in->addContent($mobo);
	$counter++;

	trim($pieces[10]) === '' ?: $mobo->addFeature(new Feature('brand', trim($pieces[10])));
	trim($pieces[11]) === '' ?: $mobo->addFeature(new Feature('model', trim($pieces[11])));
	$sn = trim($pieces[12]);
	if($sn !== '') {
		$sn = explode('/', $sn, 2);
		$mobo->addFeature(new Feature('sn', $sn[0]));
		if(count($sn) > 1) {
			$in->addFeature(new Feature('sn', $sn[1]));
		}
	}
	unset($sn);

	trim($pieces[11]) === '' ?: $mobomodel = trim($pieces[11]);

	if($in->getCode() === '71') {
		$mobo->addFeature(new Feature('isa-sockets-n', 1));
	}

	switch(trim($pieces[11])) {
		case 'D845GVFT':
		case 'MS-6528':
		case 'Scenic S2 D1331-A10 W26361-W48-X-01':
		case 'K7VT4A+':
			$mobo->addFeature(new Feature('game-ports-n', 1));
			break;
	}

	switch(trim($pieces[11])) {
		case 'P4P800 Deluxe':
			$in->addFeature(new Feature('color', 'blue'));
			$mobo->addFeature(new Feature('color', 'yellow'));
			break;
		case 'MS-6528':
			$mobo->addFeature(new Feature('color', 'red'));
			$in->addFeature(new Feature('color',
				'yellowed')); // What's up with all those colorful motherboards inside cheap yellowed cases?
			break;
		case 'P5QPL-AM':
			$mobo->addFeature(new Feature('color', 'brown'));
			$in->addFeature(new Feature('color', 'black'));
			break;
		case 'K7VT4A+':
			$mobo->addFeature(new Feature('color', 'blue'));
			$in->addFeature(new Feature('color', 'yellowed'));
			break;
		case 'E61ML':
			$mobo->addFeature(new Feature('color', 'violet'));
			$in->addFeature(new Feature('color', 'yellowed'));
			break;
		case 'Processor Board (1998)':
			$mobo->addFeature(new Feature('color', 'yellow'));
			$mobo->addFeature(new Feature('isa-sockets-n', 2));
			$in->addFeature(new Feature('color', 'yellowed'));
			break;
	}

	$ports = [
		13 => 'agp-sockets-n',
		14 => 'pci-sockets-n',
		15 => 'pcie-sockets-n',
		16 => 'sata-ports-n',
		17 => 'ide-ports-n',
		18 => 'vga-ports-n',
		19 => 'dvi-ports-n',
		21 => 'serial-ports-n',
		22 => 'parallel-ports-n',
		23 => 'usb-ports-n',
		24 => 'firewire-ports-n',
	];

	$howmanyports = 0;
	foreach($ports as $pos => $type) {
		if($pieces[$pos] !== '') {
			$howmanyports++;
			if($pieces[$pos] === '0') {
				continue;
			}

			if(is_numeric($pieces[$pos])) {
				$mobo->addFeature(new Feature($type, (int) $pieces[$pos]));
			} else {
				$value = $pieces[$pos];
				$decoded = false;
				switch($pos) {
					case 14:
						if($value === 'mini') {
							$mobo->addFeature(new Feature('mini-pci-sockets-n', 1));
							$decoded = true;
						}
						break;
					case 15:
						if($value === 'mini') {
							$mobo->addFeature(new Feature('mini-pcie-sockets-n', 1));
							$decoded = true;
						}
						break;
					case 16:
						if($value === '6xSCA2') {
							$mobo->addFeature(new Feature('scsi-sca2-ports-n', 6));
							$decoded = true;
						} else if($value === '2xSCA2') {
							$mobo->addFeature(new Feature('scsi-sca2-ports-n', 2));
							$decoded = true;
						} else if($value === '2xDB68') {
							$mobo->addFeature(new Feature('scsi-db68-ports-n', 2));
							$decoded = true;
						}
						break;
					case 18:
						if($value === '1+S-Video') {
							$mobo->addFeature(new Feature('vga-ports-n', 1));
							$mobo->addFeature(new Feature('s-video-ports-n', 1));
							$decoded = true;
						} else if($value === 'HDMI') {
							$mobo->addFeature(new Feature('hdmi-ports-n', 1));
							$decoded = true;
						}
						break;
					case 24:
						if($value === 'mini') {
							$mobo->addFeature(new Feature('mini-firewire-ports-n', 1));
							$decoded = true;
						}
						break;
				}
				if(!$decoded) {
					stop("Cannot decode value $value for $type", $line);
				}
			}
		}
	}
	if($howmanyports !== count($ports)) {
		$mobo->addFeature(new Feature('check', 'missing-data'));
		$check++;
	}
	if($pieces[20] !== '') {
		switch((string) $pieces[20]) {
			case '1000':
				$mobo->addFeature(new Feature('ethernet-ports-1000m-n', 1));
				break;
			case '2x1000':
				$mobo->addFeature(new Feature('ethernet-ports-1000m-n', 2));
				break;
			case '100':
				$mobo->addFeature(new Feature('ethernet-ports-100m-n', 1));
				break;
			case '2x100':
				$mobo->addFeature(new Feature('ethernet-ports-100m-n', 2));
				break;
			case '10':
				$mobo->addFeature(new Feature('ethernet-ports-10m-n', 1));
				break;
			// Some columns have been "overloaded" with random stuff, because I didn't want to add a billion columns at the end of the sheet
			// Not really a nice design, but this script will be hopefully thrown away forever once the import is done
			case 'M+1000':
				// Who puts a modem and a Gigabit Ethernet port on the same motherboard!? Well, that's happened.
				$mobo->addFeature(new Feature('ethernet-ports-1000m-n', 1));
				$mobo->addFeature(new Feature('rj11-ports-n', 1));
				break;
			case 'M+100':
				$mobo->addFeature(new Feature('ethernet-ports-100m-n', 1));
				$mobo->addFeature(new Feature('rj11-ports-n', 1));
				break;
			case 'M':
				$mobo->addFeature(new Feature('rj11-ports-n', 1));
				break;
			case '0':
				break;
			default:
				stop("Unknown ethernet speed: " . $pieces[20], $line);
		}
	}
	$needfixup = false;
	switch($pieces[25]) {
		case '?':
			$in->addFeature(new Feature('check', 'missing-data'));
			$check++;
			break;
		case 'Proprietaria':
			$f = 'proprietary';
			$mobo->addFeature(new Feature('motherboard-form-factor', $f));
			$in->addFeature(new Feature('motherboard-form-factor', $f));
			$needfixup = true;
			break;
		case 'ATX':
			$f = 'atx';
			$mobo->addFeature(new Feature('motherboard-form-factor', $f));
			$in->addFeature(new Feature('motherboard-form-factor', $f));
			$needfixup = true;
			break;
		case 'WTX':
			$f = 'wtx';
			$mobo->addFeature(new Feature('motherboard-form-factor', $f));
			$in->addFeature(new Feature('motherboard-form-factor', $f));
			$needfixup = true;
			break;
		case 'BTX':
			$f = 'btx';
			$mobo->addFeature(new Feature('motherboard-form-factor', $f));
			$in->addFeature(new Feature('motherboard-form-factor', $f));
			$needfixup = true;
			break;
		case 'MicroBTX':
			$f = 'microbtx';
			$mobo->addFeature(new Feature('motherboard-form-factor', $f));
			$in->addFeature(new Feature('motherboard-form-factor', $f));
			$needfixup = true;
			break;
		case 'NanoBTX':
			$f = 'nanobtx';
			$mobo->addFeature(new Feature('motherboard-form-factor', $f));
			$in->addFeature(new Feature('motherboard-form-factor', $f));
			$needfixup = true;
			break;
		case 'PicoBTX':
			$f = 'picobtx';
			$mobo->addFeature(new Feature('motherboard-form-factor', $f));
			$in->addFeature(new Feature('motherboard-form-factor', $f));
			$needfixup = true;
			break;
		case 'Portatile':
			$f = 'proprietary-laptop';
			$mobo->addFeature(new Feature('motherboard-form-factor', $f));
			$in->addFeature(new Feature('motherboard-form-factor', $f));
			break;
		case 'EATX':
			$f = 'eatx';
			$mobo->addFeature(new Feature('motherboard-form-factor', $f));
			$in->addFeature(new Feature('motherboard-form-factor', $f));
			$needfixup = true;
			break;
		case 'MicroATX':
			$f = 'microatx';
			$mobo->addFeature(new Feature('motherboard-form-factor', $f));
			switch($mobomodel) {
				case '0A58h':
				case '085Ch':
				case '09F0h':
					echo 'Shimming the shim out of weird HP Compaq motherboard + case combos...' . PHP_EOL;
					$in->addFeature(new Feature('motherboard-form-factor', 'atx'));
					break;
				case 'P4P800-MX':
					echo 'Shimming the shim out of Frankenstein\'s pc...' . PHP_EOL;
					$in->addFeature(new Feature('motherboard-form-factor', 'atx'));
					break;
				default:
					$in->addFeature(new Feature('motherboard-form-factor', $f));
			}
			$needfixup = true;
			break;
		case 'MiniITX':
			$f = 'miniitx';
			$mobo->addFeature(new Feature('motherboard-form-factor', $f));
			$in->addFeature(new Feature('motherboard-form-factor', $f));
			$needfixup = true;
			break;
		default:
			stop("Unknown motheboard form factor:" . $pieces[25], $line);
	}
	working($mobo, $pieces[26], $line);

	if(substr($pieces[27], 0, 1) === '2') {
		$ncpu = 2;
	} else {
		$ncpu = 1;
	}
	for($i = 0; $i < $ncpu; $i++) {
		$cpu = new Item('C' . ++$cpuid);
		isduplicate($cpu->getCode(), $line);
		$otherContainers[$cpu->getCode()] = $cpu;
		$cpu->addFeature(new Feature('type', 'cpu'));
		$mobo->addContent($cpu);
		$creation[$cpu->getCode()] = $pieces[42];
		$counter++;

		switch(trim($pieces[27])) {
			case 'Intel':
			case '2x Intel':
				$cpu->addFeature(new Feature('brand', 'Intel'));
				break;
			case '':
			case '?':
				break;
			/** @noinspection PhpMissingBreakStatementInspection - yep, fallthrough */
			case 'Anyka':
				$cpu->addFeature(new Feature('isa', 'arm'));
			default:
				$cpu->addFeature(new Feature('brand', trim($pieces[27])));
		}
		trim($pieces[28]) === '' ?: $cpu->addFeature(new Feature('model', trim($pieces[28])));

		$missing = false;
		$notes = '';
		if(trim($pieces[29]) !== '') {
			$freq = (int) (((double) trim($pieces[29])) * 1000000);
			$cpu->addFeature(new Feature('frequency-hertz', $freq));
		} else {
			$missing = true;
			$notes .= 'Frequenza?';
		}
		if(trim($pieces[30]) !== '') {
			switch(trim($pieces[30])) {
				case 'LGA775':
					$cpu->addFeature(new Feature('cpu-socket', 'lga775'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'lga775'));
					break;
				case 'mPGA478B':
					$cpu->addFeature(new Feature('cpu-socket', 'socket478'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'socket478'));
					break;
				case 'mPGA478A':
					$cpu->addFeature(new Feature('cpu-socket', 'socket479a'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'socket479a'));
					break;
				case 'mPGA478C':
					$cpu->addFeature(new Feature('cpu-socket', 'socket479c'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'socket479c'));
					break;
				case '370':
					$cpu->addFeature(new Feature('cpu-socket', 'socket370'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'socket370'));
					break;
				case '462 (A)':
					$cpu->addFeature(new Feature('cpu-socket', 'socket462a'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'socket462a'));
					break;
				case 'Socket M':
					$cpu->addFeature(new Feature('cpu-socket', 'socket479m'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'socket479m'));
					break;
				case '615':
					$cpu->addFeature(new Feature('cpu-socket', 'socket615'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'socket615'));
					break;
				case '603':
					$cpu->addFeature(new Feature('cpu-socket', 'socket603'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'socket603'));
					break;
				case '604':
					$cpu->addFeature(new Feature('cpu-socket', 'socket604'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'socket604'));
					break;
				case 'Soldered':
					// TODO: replace this soldered-in-place item with Product
					break;
				case 'LGA1155':
					$cpu->addFeature(new Feature('cpu-socket', 'lga1155'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'lga1155'));
					break;
				case 'LGA1156':
					$cpu->addFeature(new Feature('cpu-socket', 'lga1156'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'lga1156'));
					break;
				case 'LGA771':
					$cpu->addFeature(new Feature('cpu-socket', 'lga771'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'lga771'));
					break;
				case 'LGA1366':
					$cpu->addFeature(new Feature('cpu-socket', 'lga1366'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'lga1366'));
					break;
				case 'Socket P':
					$cpu->addFeature(new Feature('cpu-socket', 'p'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'p'));
					break;
				case 'Slot 1':
					$cpu->addFeature(new Feature('cpu-socket', 'slot1'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'slot1'));
					break;
				case '495':
					$cpu->addFeature(new Feature('cpu-socket', 'slot1'));
					$i === 0 && $mobo->addFeature(new Feature('cpu-socket', 'slot1'));
					break;
				default:
					stop('Unknown socket: ' . trim($pieces[30]), $line);
			}
		} else {
			$missing = true;
			$notes .= 'Socket?';
		}
		if($missing) {
			$cpu->addFeature(new Feature('check', 'missing-data'))->addFeature(new Feature('notes', $notes));
			$check++;
		}
		working($cpu, $pieces[31], $line);
		$notes = trim($pieces[39]);
		if($notes !== '') {
			if(substr($notes, 0, 12) === 'CPU 32 bit. ') {
				$cpu->addFeature(new Feature('isa', 'x86-32'));
			} else {
				// This skips unknown CPUs (since we don't really know if they're 32 or 64 bits, yet)
				if(array_key_exists('cpu-socket', $cpu->getFeatures())) {
					$cpu->addFeature(new Feature('isa', 'x86-64'));
				}
			}
		}
		unset($notes);
	}

	switch($pieces[33]) {
		case 'Integrata (mobo)':
		case 'SG30': // little exception for one of the few PCs with integrated and discrete graphics. BTW, the discrete one is completely broken.
		case 'SG50':
		case 'SG34':
		case 'SG25':
			$mobo->addFeature(new Feature('integrated-graphics-brand', trim($pieces[34])));
			$mobo->addFeature(new Feature('integrated-graphics-model', trim($pieces[35])));
			break;
		case 'Integrata (CPU)':
			$cpu->addFeature(new Feature('integrated-graphics-brand', trim($pieces[34])));
			$cpu->addFeature(new Feature('integrated-graphics-model', trim($pieces[35])));
			break;
		case '':
			break;
		default:
			/** @noinspection PhpStatementHasEmptyBodyInspection */
			if(substr($pieces[33], 0, 2) !== 'SG') {
				stop('Integrated graphics incompletely inventoried, value: ' . $pieces[33], $line);
			}
	}
	unset($cpu);

	$psucode = trim($pieces[38]);
	if(substr($psucode, 0, 1) === 'A') {
		$psufixupconnectors[$psucode] = $mobo;
		if($needfixup) {
			$psufixupformfactor[$psucode] = $in;
		}
		unset($needfixup);
	} else if(substr($psucode, 0, 4) === 'No, ') {
		$psupieces = explode(', ', $psucode);
		if($psupieces[1] === 'Barrel') {
			$in->addFeature(new Feature('power-connector', 'barrel'));
			if(count($psupieces) > 2) {
				if(count($psupieces) !== 4) {
					stop("Wrong format for barrel in: $psucode", $line);
				}
				$v = (double) substr($psupieces[2], 0, -2);
				$a = (double) substr($psupieces[3], 0, -2);
				$in->addFeature(new Feature('psu-volt', $v));
				$in->addFeature(new Feature('psu-ampere', $a));
				unset($a);
				unset($v);
			}
		} else if($psupieces[1] === 'DA-2') {
			$in->addFeature(new Feature('power-connector', 'da-2'));
		} else {
			switch(trim($psupieces[1])) {
				case 'ATX 24 + 4':
					$mobopin = 'atx-24pin';
					$cpupin = '4pin';
					$psuformfactor = 'atx';
					break;
				case 'ATX 24 + 8':
					$mobopin = 'atx-24pin';
					$cpupin = '8pin';
					$psuformfactor = 'atx';
					break;
				case 'CFX 24 + 4':
					$mobopin = 'atx-24pin';
					$cpupin = '4pin';
					$psuformfactor = 'cfx';
					break;
				case 'LFX 20 + 4':
					$mobopin = 'atx-20pin';
					$cpupin = '4pin';
					$psuformfactor = 'lfx';
					break;
				default:
					stop('Uknown supposedly internal PSU type: ' . $psupieces[1], $line);
			}

			$mobo->addFeature(new Feature('psu-connector-cpu', $cpupin));
			$mobo->addFeature(new Feature('psu-connector-motherboard', $mobopin));
			$in->addFeature(new Feature('psu-form-factor', $psuformfactor));
			unset($cpupin);
			unset($mobopin);
			unset($psuformfactor);
		}
	}
	unset($psucode);

	$notes = trim($pieces[39]);
	if($notes !== '') {
		if(substr($notes, 0, 12) === 'CPU 32 bit. ') {
			$in->addFeature(new Feature('notes', substr($notes, 12)));
		} else {
			$in->addFeature(new Feature('notes', $notes));
		}
	}
	unset($notes);

	if(trim($pieces[40]) !== '') {
		$pfcpieces = explode('W, PFC', trim($pieces[40]), 2);
		if(count($pfcpieces) !== 2) {
			stop('Value doesn\'t explode properly: ' . $pieces[41], $line);
		}
		$in->addFeature(new Feature('power-idle-watt', (int) $pfcpieces[0]));
		$in->addFeature(new Feature('power-idle-pfc', $pfcpieces[1]));
		unset($pfcpieces);
	}

	$creation[$in->getCode()] = $pieces[42];
	placeinto($in, $pieces[43], $line);
	$in->addFeature(new Feature('arrival-batch', trim($pieces[44])));
	own($in, trim($pieces[45]), $line);
	if(trim($pieces[41]) === 'Si' && !array_key_exists('restrictions', $in->getFeatures())) {
		$in->addFeature(new Feature('restrictions', 'ready'));
	}
	trim($pieces[46]) === '' ?: $in->addFeature(new Feature('software', trim($pieces[46])));

	if(!array_key_exists('restrictions', $in->getFeatures())) {
		switch($in->getCode()) {
			case '12':
			case '13':
			case '73':
			case '71':
			case '92':
				$in->addFeature(new Feature('restrictions', 'training'));
		}
	}

	$counter++;
}
$files['case'] = $counter;
unset($in);

$header = fgets($files['monitor']);
$header = explode('|', $header);

$counter = 0;
while(($line = fgets($files['monitor'])) !== false) {
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));
	isduplicate($in->getCode(), $line);
	$in->addFeature(new Feature('type', 'monitor'));
	trim($pieces[1]) === '' ?: $in->addFeature(new Feature('cib', trim($pieces[1])));
	trim($pieces[2]) === '' ?: $in->addFeature(new Feature('cib-old', trim($pieces[2])));
	trim($pieces[3]) === '' ?: $in->addFeature(new Feature('other-code', trim($pieces[3])));
	trim($pieces[4]) === '' ?: $in->addFeature(new Feature('brand', trim($pieces[4])));
	($pieces[5] === '' || $pieces[5] === '-') ?: $in->addFeature(new Feature('model', trim($pieces[5])));
	working($in, $pieces[6], $line);
	$pieces[7] === '-' ?: $in->addFeature(new Feature('vga-ports-n', 1));
	$pieces[8] === '-' ?: $in->addFeature(new Feature('dvi-ports-n', 1));
	$pieces[9] === '-' ?: ($in->addFeature(new Feature('usb-ports-n', 2)) && $in->addFeature(new Feature('check',
			'wrong-data')) && $check++);
	$pieces[10] === '-' ?: $in->addFeature(new Feature('hdmi-ports-n', 1));
	$pieces[11] === '-' ?: $in->addFeature(new Feature('s-video-ports-n', 1));
	$pieces[12] === '' ?: $in->addFeature(new Feature('notes', trim($pieces[12])));
	if($pieces[13] !== '') {
		$power = explode('/', $pieces[13], 2);
		if(count($power) === 2) {
			$in->addFeature(new Feature('power-connector', 'barrel'));
			$in->addFeature(new Feature('psu-volt', (double) trim($power[0])));
			$in->addFeature(new Feature('psu-ampere', (double) trim($power[1])));
		} else {
			$in->addFeature(new Feature('power-connector', 'c13'));
		}
	}
	$pieces[14] === '' ?: $in->addFeature(new Feature('sn', trim($pieces[14])));
	placeinto($in, $pieces[15], $line);
	$creation[$in->getCode()] = $pieces[16];
	if($pieces[17] === 'AreaIT') {
		$pieces[17] = 'Area IT';
	}
	$pieces[17] === '' ?: own($in, trim($pieces[17]), $line);
	$counter++;
}
$files['monitor'] = $counter;
unset($in);

$header = fgets($files['ram']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['ram'])) !== false) {
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));
	isduplicate($in->getCode(), $line);
	$in->addFeature(new Feature('type', 'ram'));
	$pieces[1] === '' ?: $in->addFeature(new Feature('ram-type', strtolower(trim($pieces[1]))));
	$pieces[2] === '' ?: $in->addFeature(new Feature('ram-form-factor', strtolower(trim($pieces[2]))));
	$pieces[3] === '' ?: $in->addFeature(new Feature('frequency-hertz', $pieces[3] * 1000000));
	$pieces[4] === '' ?: $in->addFeature(new Feature('capacity-byte', $pieces[4] * 1048576));
	working($in, $pieces[5], $line);
	if(trim($pieces[6]) !== '') {
		$pieces[6] = trim($pieces[6]);
		$subpieces = explode(' ', $pieces[6], 2);
		assert(count($subpieces) > 0);
		if(count($subpieces) === 1) {
			if(substr($subpieces[0], 0, 5) === 'VS512') {
				$in->addFeature(new Feature('model', $subpieces[0]));
			} else {
				$in->addFeature(new Feature('brand', $subpieces[0]));
			}
		} else {
			$in->addFeature(new Feature('brand', $subpieces[0]));
			$in->addFeature(new Feature('model', $subpieces[1]));
		}
	}
	$pieces[7] = trim($pieces[7]);
	$pieces[7] === '' || $pieces[7] === '-' ?: $in->addFeature(new Feature('sn', trim($pieces[7])));
	if(mb_substr($pieces[7], 0, 3) === '...' || mb_substr($pieces[7], 0, 1) === '…') {
		$in->addFeature(new Feature('check', 'missing-data'));
		$check++;
	}
	$pieces[8] === '' ?: $in->addFeature(new Feature('notes', trim($pieces[8])));
	placeinto($in, $pieces[9], $line);
	$creation[$in->getCode()] = $pieces[10];
	$pieces[11] === '' ?: own($in, trim($pieces[11]), $line);

	$location = strtoupper(trim($pieces[9]));
	if($location === 'EMILIA' || $location === 'ROSETTA' || $location === 'ROSITA' || $location === '40') {
		$in->addFeature(new Feature('ram-ecc', 'yes'));
	} else {
		$in->addFeature(new Feature('ram-ecc', 'no'));
	}

	$counter++;
}
$files['ram'] = $counter;
unset($in);


$header = fgets($files['hdd']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['hdd'])) !== false) {
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));
	isduplicate($in->getCode(), $line);
	$in->addFeature(new Feature('type', 'hdd'));

	if(trim($pieces[0]) === 'HDD2') {
		$in->addFeature(new Feature('check', 'wrong-data'));
		$check++;
	}

	if(substr($pieces[11], 0, 5) === 'Perso') {
		placeinto($in, 'Chernobyl', $line);
		$in->addFeature(new Feature('check', 'wrong-location'));
		$check++;
	} else {
		placeinto($in, $pieces[11], $line);
	}

	switch(trim($pieces[1])) {
		case 'IDE':
			$in->addFeature(new Feature('ide-ports-n', 1));
			$in->addFeature(new Feature('hdd-odd-form-factor', '3.5'));
			break;
		case 'SATA':
			$in->addFeature(new Feature('sata-ports-n', 1));
			$in->addFeature(new Feature('hdd-odd-form-factor', '3.5'));
			break;
		case 'SATA (slim)':
			$in->addFeature(new Feature('sata-ports-n', 1));
			$in->addFeature(new Feature('hdd-odd-form-factor', '2.5-9.5mm'));
			break;
		case 'MiniIDE':
			$in->addFeature(new Feature('mini-ide-ports-n', 1));
			$in->addFeature(new Feature('hdd-odd-form-factor', '2.5-9.5mm'));
			break;
		case 'SCSI DB68':
			$in->addFeature(new Feature('scsi-db68-ports-n', 1));
			$in->addFeature(new Feature('hdd-odd-form-factor', '3.5'));
			break;
		case 'SCSI SCA2':
			$in->addFeature(new Feature('scsi-sca2-ports-n', 1));
			$in->addFeature(new Feature('hdd-odd-form-factor', '3.5'));
			break;
		default:
			stop('Unknown connector type', $line);
	}
	if(trim($pieces[2]) !== '') {
		$pieces[2] = trim($pieces[2]);
		$subpieces = explode(' ', $pieces[2], 2);
		assert(count($subpieces) > 0);

		if($subpieces[0] === 'WesternDigital') {
			$subpieces[0] = 'Western Digital';
		}

		if(count($subpieces) === 1) {
			$in->addFeature(new Feature('brand', $subpieces[0]));
		} else {
			$in->addFeature(new Feature('brand', $subpieces[0]));
			$in->addFeature(new Feature('model', $subpieces[1]));
		}
	}

	if($pieces[3] === '') {
		array_key_exists('check', $in->getFeatures()) ?: ($in->addFeature(new Feature('check',
				'missing-data')) && $check++);
	} else {
		$thing = trim($pieces[3]);
		if(strpos($thing, ',') > -1) {
			$thing = str_replace(',', '.', $thing);
			$size = (int) ((double) $thing * 1000000000.0);
		} else {
			$size = trim($pieces[3]) * 1000000000;
		}
		$in->addFeature(new Feature('capacity-decibyte', $size));
	}

	$pieces[4] === '' ?: $in->addFeature(new Feature('spin-rate-rpm', (int) $pieces[4]));

	if($pieces[5] === '') {
		array_key_exists('check', $in->getFeatures()) ?: ($in->addFeature(new Feature('check',
				'missing-data')) && $check++);
	} else {
		$in->addFeature(new Feature('sn', $pieces[5]));
	}

	working($in, $pieces[6], $line);

	if($pieces[7] !== '' && $pieces[7] !== 'no') {
		$in->addFeature(new Feature('data-erased', 'yes'));
	}

	if($pieces[8] !== '') {
		switch(trim($pieces[8])) {
			case 'ok':
				$in->addFeature(new Feature('surface-scan', 'pass'));
				break;
			case 'no':
				$in->addFeature(new Feature('surface-scan', 'fail'));
				break;
			default:
				stop('Unknown badblocks value', $line);
		}
	}

	if($pieces[9] !== '') {
		switch(trim($pieces[9])) {
			case 'ok':
				$in->addFeature(new Feature('smart-data', 'ok'));
				break;
			case 'no':
				$in->addFeature(new Feature('smart-data', 'fail'));
				break;
			case 'ni':
				$in->addFeature(new Feature('smart-data', 'old'));
				break;
			default:
				stop('Unknown S.M.A.R.T. status value', $line);
		}
	}

	$pieces[10] === '' ?: $in->addFeature(new Feature('notes', trim($pieces[10])));
	$creation[$in->getCode()] = $pieces[12];
	$pieces[13] === '' ?: own($in, trim($pieces[13]), $line);
	$counter++;
}
$files['hdd'] = $counter;
unset($in);

$header = fgets($files['odd']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['odd'])) !== false) {
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));
	isduplicate($in->getCode(), $line);
	$in->addFeature(new Feature('type', 'odd'));

	switch(trim($pieces[1])) {
		case 'IDE':
			$in->addFeature(new Feature('ide-ports-n', 1));
			$in->addFeature(new Feature('hdd-odd-form-factor', '5.25'));
			break;
		case 'SATA':
			$in->addFeature(new Feature('sata-ports-n', 1));
			$in->addFeature(new Feature('hdd-odd-form-factor', '5.25'));
			break;
		case 'SATA (slim)':
			$in->addFeature(new Feature('sata-ports-n', 1));
			$in->addFeature(new Feature('hdd-odd-form-factor', 'laptop-odd-standard'));
			break;
		case 'JAE (slim)':
			$in->addFeature(new Feature('jae-ports-n', 1));
			$in->addFeature(new Feature('hdd-odd-form-factor', 'laptop-odd-standard'));
			break;
		case 'SCSI (slim)':
			$in->addFeature(new Feature('scsi-sca2-ports-n', 1));
			$in->addFeature(new Feature('hdd-odd-form-factor', 'laptop-odd-standard'));
			break;
		case 'Proprietario':
			$in->addFeature(new Feature('hdd-odd-form-factor', 'laptop-odd-standard'));
			break;
		default:
			stop('Unknown connector type', $line);
	}

	if($pieces[2] !== '') {
		$type = strtolower(trim($pieces[2])) . '-' . strtolower(trim($pieces[3]));
		$subpieces = explode(' ', $pieces[2], 2);
		assert(count($subpieces) > 0);
		$in->addFeature(new Feature('odd-type', $type));
	} else {
		array_key_exists('check', $in->getFeatures()) ?: ($in->addFeature(new Feature('check',
				'missing-data')) && $check++);
	}


	$pieces[4] === '' ?: $in->addFeature(new Feature('brand', $pieces[4]));
	$pieces[5] === '' ?: $in->addFeature(new Feature('model', $pieces[5]));
	working($in, $pieces[6], $line);


	if($pieces[7] !== '' && $pieces[7] !== '-') {
		$in->addFeature(new Feature('sn', $pieces[7]));
	}

	$pieces[8] === '' ?: $in->addFeature(new Feature('notes', trim($pieces[8])));
	$pieces[9] === '' ?: colorify($in, $pieces[9], $line);
	placeinto($in, $pieces[10], $line);
	$creation[$in->getCode()] = $pieces[11];
	$pieces[12] === '' ?: own($in, trim($pieces[12]), $line);
	$counter++;
}
$files['odd'] = $counter;
unset($in);

$header = fgets($files['input']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['input'])) !== false) {
	if(strstr($line, '!|||||||||||') > -1) {
		echo 'Skipping comment on keyboards...' . PHP_EOL;
		continue;
	}
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));
	isduplicate($in->getCode(), $line);

	if($pieces[1] === 'Mouse') {
		$in->addFeature(new Feature('type', 'mouse'));
	} else if($pieces[1] === 'Tastiera') {
		$in->addFeature(new Feature('type', 'keyboard'));
	} else {
		stop('Unknown type: ' . $pieces[1], $line);
	}

	switch(trim($pieces[2])) {
		case 'PS/2':
			$in->addFeature(new Feature('ps2-ports-n', 1));
			break;
		case 'USB':
			$in->addFeature(new Feature('usb-ports-n', 1));
			break;
		case 'Seriale':
			$in->addFeature(new Feature('serial-ports-n', 1));
			break;
		case 'Wireless (in)':
			$in->addFeature(new Feature('wireless-receiver', 'inside'));
			break;
		case 'Wireless (near)':
			$in->addFeature(new Feature('wireless-receiver', 'near'));
			break;
		case 'Wireless (no)':
			$in->addFeature(new Feature('wireless-receiver', 'missing'));
			break;
		default:
			stop('Unknown connector type', $line);
	}

	$pieces[3] === '' ?: $in->addFeature(new Feature('brand', $pieces[3]));
	$pieces[4] === '' ?: $in->addFeature(new Feature('model', $pieces[4]));
	working($in, $pieces[5], $line);
	$pieces[6] === '' ?: colorify($in, $pieces[6], $line);
	$pieces[7] === '' ?: $in->addFeature(new Feature('notes', trim($pieces[7])));
	($pieces[8] === '' || $pieces[8] === '-') ?: $in->addFeature(new Feature('sn', $pieces[8]));
	placeinto($in, $pieces[9], $line);
	$creation[$in->getCode()] = $pieces[10];
	$pieces[11] === '' ?: own($in, trim($pieces[11]), $line);

	$missing = $pieces[9] === 'Perso' || $pieces[9] === 'Duplicato';
	$noserial = $pieces[8] === '';
	$wrongcode = $pieces[0]{1} === 'A';

	if($missing) {
		if($noserial || $wrongcode) {
			$in->addFeature(new Feature('check', 'wrong-location-and-data'));
			$check++;
		} else {
			$in->addFeature(new Feature('check', 'missing-data'));
			$check++;
		}
	} else if($noserial) {
		$in->addFeature(new Feature('check', 'missing-data'));
		$check++;
	} else if($wrongcode) {
		$in->addFeature(new Feature('check', 'wrong-data'));
		$check++;
	}

	$counter++;
}
$files['input'] = $counter;
unset($in);

$header = fgets($files['cards']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['cards'])) !== false) {
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));
	isduplicate($in->getCode(), $line);

	switch($pieces[1]) {
		case 'Audio':
			$in->addFeature(new Feature('type', 'audio-card'));
			break;
		case 'Ethernet':
			$netids[(int) substr($in->getCode(), 3)] = $in->getCode();
			$in->addFeature(new Feature('type', 'ethernet-card'));
			break;
		case 'Modem':
			$in->addFeature(new Feature('type', 'modem-card'));
			break;
		case 'Grafica':
			$in->addFeature(new Feature('type', 'graphics-card'));
			break;
		case 'USB':
		case 'Firewire':
		case 'Seriale':
		case 'Parallela':
		case '?':
			$in->addFeature(new Feature('type', 'other-card'));
			break;
		case 'WiFi':
			$in->addFeature(new Feature('type', 'wifi-card'));
			break;
		case 'Bluetooth':
			$in->addFeature(new Feature('type', 'bluetooth-card'));
			break;
		case 'SCSI':
			$in->addFeature(new Feature('type', 'scsi-card'));
			break;
		case 'TV':
			$in->addFeature(new Feature('type', 'tv-card'));
			break;
		case 'Bracket':
			$in->addFeature(new Feature('type', 'ports-bracket'));
			break;
		default:
			stop('Unknown type: ' . $pieces[1], $line);
	}

	$hasports = false;
	// It's as wonderful and dreadful as it looks.
	$pieces[2] === '' ?: $in->addFeature(new Feature('ethernet-ports-10m-n', (int) $pieces[2])) && $hasports = true;
	$pieces[3] === '' ?: $in->addFeature(new Feature('ethernet-ports-100m-n', (int) $pieces[3])) && $hasports = true;
	$pieces[4] === '' ?: $in->addFeature(new Feature('ethernet-ports-1000m-n', (int) $pieces[4])) && $hasports = true;
	$pieces[5] === '' ?: $in->addFeature(new Feature('ethernet-ports-10base2-bnc-n', (int) $pieces[5])) && $hasports = true;
	$pieces[6] === '' ?: $in->addFeature(new Feature('ethernet-ports-10base5-aui-n',	(int) $pieces[6])) && $hasports = true;
	$pieces[7] === '' ?: $in->addFeature(new Feature('rj11-ports-n', (int) $pieces[7])) && $hasports = true;
	$pieces[8] === '' ?: $in->addFeature(new Feature('midi-ports-n', (int) $pieces[8])) && $hasports = true;
	$pieces[9] === '' ?: $in->addFeature(new Feature('mini-jack-ports-n', (int) $pieces[9])) && $hasports = true;
	$pieces[10] === '' ?: $in->addFeature(new Feature('rca-mono-ports-n', (int) $pieces[10])) && $hasports = true;
	$pieces[11] === '' ?: $in->addFeature(new Feature('dvi-ports-n', (int) $pieces[11])) && $hasports = true;
	$pieces[12] === '' ?: $in->addFeature(new Feature('dms-59-ports-n', (int) $pieces[12])) && $hasports = true;
	$pieces[13] === '' ?: $in->addFeature(new Feature('vga-ports-n', (int) $pieces[13])) && $hasports = true;
	$pieces[15] === '' ?: $in->addFeature(new Feature('tv-out-ports-n', (int) $pieces[15])) && $hasports = true;
	$pieces[16] === '' ?: $in->addFeature(new Feature('usb-ports-n', (int) $pieces[16])) && $hasports = true;
	$pieces[17] === '' ?: $in->addFeature(new Feature('serial-ports-n', (int) $pieces[17])) && $hasports = true;
	$pieces[18] === '' ?: $in->addFeature(new Feature('serial-db25-ports-n', (int) $pieces[18])) && $hasports = true;
	$pieces[19] === '' ?: $in->addFeature(new Feature('firewire-ports-n', (int) $pieces[19])) && $hasports = true;
	$pieces[20] === '' ?: $in->addFeature(new Feature('scsi-db68-ports-n', (int) $pieces[20])) && $hasports = true;

	if($pieces[14] !== '') {
		if(is_numeric($pieces[14])) {
			$in->addFeature(new Feature('s-video-ports-n', (int) $pieces[14])) && $hasports = true;
		} else if($pieces[14] === 'Analogico') {
			// This is often called S-Video for no apparent reason, since it's a different connector
			$in->addFeature(new Feature('composite-video-ports-n', (int) $pieces[14])) && $hasports = true;
		} else if($pieces[14] === '1+Analogico') {
			$in->addFeature(new Feature('s-video-ports-n', (int) $pieces[14])) && $hasports = true;
			$in->addFeature(new Feature('composite-video-ports-n', (int) $pieces[14])) && $hasports = true;
		} else if($pieces[14] === 'Grande') {
			$in->addFeature(new Feature('s-video-7pin-ports-n', (int) $pieces[14])) && $hasports = true;
		} else {
			stop('Lolwut s-video?', $line);
		}
	}

	// lacchezzo estremo
	if(trim(strtoupper($pieces[28])) === 'EMILIA') {
		echo 'Patching EMILIA graphics card features...' . PHP_EOL;
		$in->addFeature(new Feature('displayport-ports-n', 2));
	}

	switch($pieces[21]) {
		case 'PCI':
			$in->addFeature(new Feature('pci-sockets-n', 1));
			break;
		case 'PCIe':
			$in->addFeature(new Feature('pcie-sockets-n', 1));
			break;
		case 'AGP':
			$in->addFeature(new Feature('agp-sockets-n', 1));
			break;
		case 'ISA':
			$in->addFeature(new Feature('isa-sockets-n', 1));
			break;
		case 'Mini PCIe':
			$in->addFeature(new Feature('mini-pcie-sockets-n', 1));
			break;
		case 'Mini PCI':
			$in->addFeature(new Feature('mini-pci-sockets-n', 1));
			break;
		case 'USB header':
			$in->addFeature(new Feature('usb-header-n', 1));
			break;
		case 'Header interno':
			$in->addFeature(new Feature('internal-header-n', 1));
			break;
		case 'Proprietario':
		case '-':
		case '':
			break;
		default:
			stop('Unknown connector: ' . $pieces[21], $line);
	}
	$pieces[22] === '' ?: $in->addFeature(new Feature('brand', $pieces[22]));
	$pieces[23] === '' ?: $in->addFeature(new Feature('model', $pieces[23]));
	$pieces[24] === '' ?: $in->addFeature(new Feature('capacity-byte',
		1024 * 1024 * (int) $pieces[24])); // video RAM (for graphics cards)
	working($in, $pieces[25], $line);
	($pieces[26] === '' || $pieces[26] === '-') ?: $in->addFeature(new Feature('sn', $pieces[26]));
	$pieces[27] === '' ?: $in->addFeature(new Feature('notes', trim($pieces[27])));
	placeinto($in, $pieces[28], $line);
	$creation[$in->getCode()] = $pieces[29];
	own($in, trim($pieces[30]), $line);
	$pieces[31] === "-\n" ?: colorify($in, $pieces[31], $line);

	if($pieces[26] === '' || $pieces[21] === '' || !$hasports) {
		$in->addFeature(new Feature('check', 'missing-data'));
		$check++;
	}

	$counter++;
}
$files['cards'] = $counter;
unset($in);

$header = fgets($files['psu']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['psu'])) !== false) {
	$pieces = nuke($line, count($header));

	$missing = false;
	$in = new Item(trim($pieces[0]));
	isduplicate($in->getCode(), $line);

	switch($in->getCode()) {
		case 'A64':
		case 'A76':
			$in->addFeature(new Feature('color', 'golden'));
			break;
	}

	if(trim($pieces[1]) === '-' || $pieces[4] === 'Dell DA-2') {
		$in->addFeature(new Feature('type', 'external-psu'));
		$pieces[2] === '' ? $missing = true : $in->addFeature(new Feature('psu-volt', (double) $pieces[2]));
		$pieces[3] === '' ? $missing = true : $in->addFeature(new Feature('psu-ampere', (double) $pieces[3]));
		if(trim($pieces[4]) === '?') {
			$missing = true;
		} else {
			psupls($in, trim($pieces[4]), $line);
		}
	} else {
		$in->addFeature(new Feature('type', 'psu'));
		$pieces[1] === '?' ? $missing = true : $in->addFeature(new Feature('power-rated-watt', (int) $pieces[1]));
		if($pieces[6] === '-') {
			stop('SATA port number set to "not applicable" for internal PSU', $line);
		} else {
			$pieces[6] === '' ? $missing = true : $in->addFeature(new Feature('sata-ports-n', (int) $pieces[6]));
		}
		if(trim($pieces[5]) === '-') {
			stop('PCIe power pins set to "not applicable" for internal PSU', $line);
		} else {
			trim($pieces[5]) === '' ? $missing = true : $in->addFeature(new Feature('pcie-power-pin-n',
				(int) trim($pieces[5])));
		}
		if(trim($pieces[4]) === '?') {
			$missing = true;
		} else {
			psupls($in, trim($pieces[4]), $line);
		}
	}

	$pieces[7] === '' ?: $in->addFeature(new Feature('brand', $pieces[7]));
	$pieces[8] === '' ?: $in->addFeature(new Feature('brand-reseller', $pieces[8]));
	$pieces[9] === '' ?: $in->addFeature(new Feature('model', $pieces[9]));
	working($in, $pieces[10], $line);
	($pieces[11] === '' || $pieces[11] === '-') ?: $in->addFeature(new Feature('sn', $pieces[11]));
	$pieces[12] === '' ?: $in->addFeature(new Feature('notes', trim($pieces[12])));
	placeinto($in, $pieces[13], $line);
	$pieces[15] === '' ?: own($in, trim($pieces[15]), $line);

	if($missing) {
		if($pieces[13] === 'Perso') {
			$in->addFeature(new Feature('check', 'wrong-location-and-data'));
		} else {
			$in->addFeature(new Feature('check', 'missing-data'));
		}
		$check++;
	}

	$counter++;
}
$files['psu'] = $counter;
unset($in);

$header = fgets($files['fdd']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['fdd'])) !== false) {
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));
	isduplicate($in->getCode(), $line);

	if($in->getCode() === 'FL20') {
		$in->addFeature(new Feature('type', 'zip-drive'));
	} else {
		$in->addFeature(new Feature('type', 'fdd'));
	}

	$pieces[1] === '' ?: $in->addFeature(new Feature('brand', $pieces[1]));
	$pieces[2] === '' ?: $in->addFeature(new Feature('model', $pieces[2]));
	($pieces[3] === '' || $pieces[3] === '-') ?: $in->addFeature(new Feature('sn', $pieces[3]));
	working($in, $pieces[4], $line);
	$pieces[5] === '' ?: $in->addFeature(new Feature('notes', trim($pieces[5])));
	placeinto($in, $pieces[6], $line);
	$creation[$in->getCode()] = $pieces[7];
	$pieces[8] === '' ?: own($in, trim($pieces[8]), $line);

	$counter++;
}
$files['fdd'] = $counter;
unset($in);

ksort($netids);
end($netids);
$netid = key($netids);
$netid++;
unset($netids);
$header = fgets($files['other']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['other'])) !== false) {
	$pieces = nuke($line, count($header));
	if(trim($pieces[0]) === '') {
		continue;
	} else {
		if(trim($pieces[0]) === 'NET') {
			$code = 'NET' . $netid++;
		} else {
			$code = trim($pieces[0]);
		}
		$in = new Item($code);
		isduplicate($in->getCode(), $line);
	}

	$container = false;
	switch($pieces[1]) {
		case 'Mobo':
			$in->addFeature(new Feature('type', 'motherboard'));
			$container = true;
			break;
		case 'CPU':
			$in->addFeature(new Feature('type', 'cpu'));
			break;
		case 'Switch ethernet':
			$in->addFeature(new Feature('type', 'network-switch'));
			break;
		case 'Hub ethernet':
			$in->addFeature(new Feature('type', 'network-hub'));
			break;
		case 'Stampante':
			$in->addFeature(new Feature('type', 'printer'));
			break;
		case 'Scanner':
			$in->addFeature(new Feature('type', 'scanner'));
			break;
		case 'USB hub':
			$in->addFeature(new Feature('type', 'usbhub'));
			break;
		case 'Coso di un Dell':
			// It's a... thing. From Dell. With an inventory sticker on it.
			$in->addFeature(new Feature('type', 'inventoried-object'));
			break;
		case 'Carrello':
			$in->addFeature(new Feature('type', 'location'));
			break;
		case 'Switch parallelo':
			// It's a switch but not really a switch
			$in->addFeature(new Feature('type', 'adapter'));
			break;
		default:
			stop('"Other" is not a choice', $line);
	}

	trim($pieces[2]) === '' ?: $in->addFeature(new Feature('cib', trim($pieces[2])));
	switch(trim($pieces[3])) {
		case 'ATX':
			$in->addFeature(new Feature('motherboard-form-factor', 'atx'));
			break;
		case 'Socket 423':
			$in->addFeature(new Feature('cpu-socket', 'socket423'));
			break;
		case 'Slot1':
			$in->addFeature(new Feature('cpu-socket', 'slot1'));
			break;
		case 'Socket 3':
			$in->addFeature(new Feature('cpu-socket', 'socket3'));
			break;
		case 'Socket 478':
			$in->addFeature(new Feature('cpu-socket', 'socket478'));
			break;
		case 'Socket 370':
			$in->addFeature(new Feature('cpu-socket', 'socket370'));
			break;
		case 'LGA775':
			$in->addFeature(new Feature('cpu-socket', 'lga775'));
			break;
		case 'Socket A':
			$in->addFeature(new Feature('cpu-socket', 'socket462a'));
			break;
	}
	$pieces[4] === '' ?: $in->addFeature(new Feature('brand', $pieces[4]));
	$pieces[5] === '' ?: $in->addFeature(new Feature('model', $pieces[5]));
	working($in, $pieces[6], $line);
	$pieces[7] === '' ?: colorify($in, $pieces[7], $line);
	($pieces[9] === '' || $pieces[9] === '-') ?: $in->addFeature(new Feature('sn', $pieces[9]));
	$pieces[10] === '' ?: $in->addFeature(new Feature('notes', trim($pieces[10])));
	placeinto($in, $pieces[11], $line, $container);
	$creation[$in->getCode()] = $pieces[12];
	$pieces[13] === '' ?: own($in, trim($pieces[13]), $line);

	$counter++;
}
$files['other'] = $counter;
unset($in);

echo 'Number of items (hopefully) correctly processed:' . PHP_EOL;
print_r($files);
$total = 0;
foreach($files as $counter) {
	$total += $counter;
}
printf("Items that need manual adjustments: %d of %d (%-4.1f%%)\n", $check, $total, 100 * ($check / $total));

//echo 'Owners statistics:'.PHP_EOL;
//arsort($owners);
//print_r($owners);

// Items are JSON encoded by the API, so this is quite legible:
//echo json_encode($polito, JSON_PRETTY_PRINT);
file_put_contents('../database.generated.json', json_encode($polito, JSON_PRETTY_PRINT));

$tz = new DateTimeZone('Europe/Rome');
foreach($creation as $item => $date) {
	try {
		$creation[$item] = new DateTime($date . ' 12:00:00', $tz);
	} catch(Exception $e) {
		echo $e->getCode() . ": $item";
		exit(1);
	}
}
unset($tz);

// Stop here to see what has been parsed without importing into database
// exit(0);

echo 'Connecting to database...' . PHP_EOL;
$dbr = new \ReflectionObject($db);
$method = $dbr->getMethod('getPDO');
$method->setAccessible(true);
$pdo = $method->invoke($db);
/**
 * @var $pdo \PDO
 */
echo 'Rebuilding database...' . PHP_EOL;

// Apparently, the mysql.proc table sometimes crashes randomly and procedures cannot be added anymore.
// Why that happens, and why is uses MyISAM instead of InnoDB, is still a mystery
$pdo->exec('USE ' . DBNAME);
$pdo->exec('DROP FUNCTION IF EXISTS GenerateCode;
DROP PROCEDURE IF EXISTS SetUser;
DROP FUNCTION IF EXISTS GetParent;
DROP TRIGGER IF EXISTS SearchResultsDelete;
DROP TRIGGER IF EXISTS SearchResultsUpdate;
DROP TRIGGER IF EXISTS SearchResultsInsert;
DROP TRIGGER IF EXISTS SetRealSearchResultTimestampBecauseMySQLCant;
DROP PROCEDURE IF EXISTS RefreshSearch;');

$pdo->exec('DROP DATABASE IF EXISTS ' . DBNAME);
$pdo->exec('CREATE DATABASE ' . DBNAME . ' DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci');
$pdo->exec('USE ' . DBNAME);
$pdo->exec(file_get_contents('database.sql'));
$pdo->exec(file_get_contents('database-data.sql'));
$pdo->exec('INSERT INTO `User` (`Name`, `Password`, `Session`, `SessionExpiry`, `Enabled`) VALUES
(\'IMPORT\', \'$2y$10$nrGjrh07hFNjzRDxCWrtfuo.Nug9.AdjcaYQuUMPQhVKRRrxz1Hsm\',	\'iR3YvecST9zvuSwyPohH4O8L4mWpj7Kk\', DEFAULT, 1)');
$pdo->exec('INSERT INTO `User` (`Name`, `Password`, `Session`, `SessionExpiry`, `Enabled`) VALUES
(\'asd\', \'$2y$10$nrGjrh07hFNjzRDxCWrtfuo.Nug9.AdjcaYQuUMPQhVKRRrxz1Hsm\',	\'asd\', DEFAULT, 1)');

echo 'Importing stored procedures & triggers...'.PHP_EOL;
$procedures = file_get_contents('database-procedures.sql');
$procedures = explode("\n", $procedures);
foreach($procedures as &$line) {
	if(substr(ltrim($line), 0, 2) === '--') {
		$line = '';
	}
}
$procedures = implode("\n", $procedures);
$procedures = str_replace(['DELIMITER $$', 'DELIMITER ;'], '', $procedures);
$procedures = explode('END $$', $procedures);
foreach($procedures as $procedure) {
	if(trim($procedure) === '') {
		continue;
	}
	$pdo->exec($procedure . "\nEND;");
}

$audit = $pdo->prepare('INSERT INTO Audit(`Code`, `Change`, `Other`, `Time`) VALUES (?, \'C\', NULL, FROM_UNIXTIME(?))');

echo 'Importing Item tree...' . PHP_EOL;
try {
	$db->beginTransaction();
	$db->itemDAO()->addItem($polito);

	echo 'Importing audit table...' . PHP_EOL;
	$pdo->exec('TRUNCATE TABLE Audit;');
	foreach($creation as $code => $datetime) {
		/** @var DateTime $datetime */
		$audit->execute([$code, $datetime->getTimestamp()]);
	}

	echo 'COMMIT!' . PHP_EOL;
	$pdo->commit();
} catch(Exception $e) {
	echo 'ROLLBACK!' . PHP_EOL;
	$db->rollback();
	throw $e;
}

echo 'Done.' . PHP_EOL;

#!/usr/bin/php
<?php
chdir(__DIR__);
if(!chdir('../tarallo-backend')) {
	echo 'Cannot change directory'.PHP_EOL;
};
/** @noinspection PhpIncludeInspection */
include 'vendor/autoload.php';

use WEEEOpen\Tarallo\Database\Database;
use WEEEOpen\Tarallo\Item;
define('DBNAME', 'tarallo');
// That's not the production server, OBVIOUSLY. This is run on testing, then database will be exported and imported again in production.
$db = new Database('root', 'root', 'mysql:host=127.0.0.1');
$check = 0; // How many items should be manually checked

function stop($error, $line) {
	echo $error.PHP_EOL;
	echo 'Line that caused the error:'.PHP_EOL;
	echo PHP_EOL.$line.PHP_EOL;
	exit(1);
}

function notice($message, $line) {
	echo $message.PHP_EOL;
	echo 'Line: ';
	echo $line.PHP_EOL;
}

function nuke($line, $expected) {
	$pieces = explode('|', $line);
	if(count($pieces) !== $expected) {
		stop('Expected ' . $expected . ' pieces, found ' . count($pieces), $line);
	}
	//if(trim($pieces[0]) === '') {
	//	notice('Skipping item without code', $line);
	//	return null;
	//}
	return $pieces;
}

function working(Item $item, $working, $line) {
	if($working !== '') {
		switch($working) {
			case 'Y':
				$item->addFeature('working', 'yes');
				break;
			case 'N':
				$item->addFeature('working', 'no');
				break;
			case 'M':
				$item->addFeature('working', 'maybe');
				break;
			default:
				stop('Working state ' . $working . ' has no meaningful meaning [sic]', $line);
		}
	}
}

$owners = [];
function own(Item $item, $owner, $line) {
	$ownerOriginal = $owner;
	$owner = preg_replace("/[^a-z]/", "", strtolower($owner));
	if($owner === 'areait' || $owner === 'polito') {
		$item->addFeature('owner', 'Area IT');
	} else if($owner === 'disat') {
		$item->addFeature('owner', 'DISAT');
	} else if($owner === 'nexa') {
		$item->addFeature('owner', 'Nexa');
	} else if(strlen($owner) > 0 && $owner{0} === 'l') {
		$item->addFeature('owner', $ownerOriginal);
		if($item->getCode() === 'SCHIFOMACCHINA') {
			$item->addFeature('restrictions', 'in-use');
		} else {
			$item->addFeature('restrictions', 'loan');
		}
	} else if($owner === 'weee') {
		$item->addFeature('owner', 'WEEE Open');
		$item->addFeature('restrictions', 'bought');
	} else if($owner === '') {
		$item->addFeature('owner', '???');
	} else {
		$item->addFeature('owner', $ownerOriginal);
		$item->addFeature('restrictions', 'other');
	}
	global $owners;
	if(!isset($owners[$owner])) {
		$owners[$owner] = 1;
	} else {
		$owners[$owner]++;
	}
}

$polito = (new Item('Polito'))->addFeature('type', 'location');
$chernobyl = (new Item('Chernobyl'))->addFeature('type', 'location');
$mrf = (new Item('Mirafiori'))->addFeature('type', 'location');
$armadiol = (new Item('ArmadioL'))->addFeature('type', 'location');
$armadior = (new Item('ArmadioR'))->addFeature('type', 'location');
$armadios = (new Item('ArmadioS'))->addFeature('type', 'location');
$armadiod = (new Item('ArmadioD'))->addFeature('type', 'location');
$scatolaRAM = (new Item('BrokenRamBox'))->addFeature('type', 'location');
$tavolo = (new Item('Tavolo'))->addFeature('type', 'location');
$groot = (new Item('Groot'))->addFeature('type', 'location');
$rotonda = (new Item('Rotonda'))->addFeature('type', 'location');
$sottoaltavolo = (new Item('UnderTable'))->addFeature('type', 'location');
$zonablu = (new Item('ZonaBlu'))->addFeature('type', 'location');
$zonarossa = (new Item('ZonaRossa'))->addFeature('type', 'location');
$zonaground = (new Item('ZonaGround'))->addFeature('type', 'location');
$davanzale = (new Item('Windowsill'))->addFeature('type', 'location');

$polito->addContent($chernobyl)->addContent($mrf);
$chernobyl->addContent($armadiol)->addContent($armadior)->addContent($armadios)->addContent($armadiod)->addContent($tavolo)->addContent($groot)->addContent($rotonda)->addContent($zonablu)->addContent($zonarossa)->addContent($zonaground)->addContent($davanzale);
$armadior->addContent($scatolaRAM);
$tavolo->addContent($sottoaltavolo);
$otherContainers = []; // Motherboards "contain" RAM sticks and CPUs

// For testing only
$case = [];
for($i = 1; $i < 95; $i++) {
	$code = (string) $i;
	$case[$code] = (new Item($code))->addFeature('type', 'case');
	switch($i % 3) {
		case 0:
			$zonablu->addContent($case[$code]);
			break;
		case 1:
			$zonarossa->addContent($case[$code]);
			break;
		case 2:
			$zonaground->addContent($case[$code]);
			break;
	}
}
$case['D1'] = $zonablu->addContent((new Item('D1'))->addFeature('type', 'case'));
$case['D2'] = $zonablu->addContent((new Item('D2'))->addFeature('type', 'case'));
$case['D3'] = $zonablu->addContent((new Item('D3'))->addFeature('type', 'case'));
$case['D4'] = $zonablu->addContent((new Item('D4'))->addFeature('type', 'case'));
$case['D5'] = $zonablu->addContent((new Item('D5'))->addFeature('type', 'case'));
$case['D6'] = $zonablu->addContent((new Item('D6'))->addFeature('type', 'case'));
$case['D7'] = $zonablu->addContent((new Item('D7'))->addFeature('type', 'case'));
$case['D8'] = $zonablu->addContent((new Item('D8'))->addFeature('type', 'case'));
$case['D9'] = $zonablu->addContent((new Item('D9'))->addFeature('type', 'case'));
$case['EMILIA'] = $zonablu->addContent((new Item('EMILIA'))->addFeature('type', 'case'));
$case['ROSETTA'] = $zonablu->addContent((new Item('ROSETTA'))->addFeature('type', 'case'));
$case['ROSITA'] = $zonablu->addContent((new Item('ROSITA'))->addFeature('type', 'case'));
$case['Gesoo'] = $zonablu->addContent((new Item('Gesoo'))->addFeature('type', 'case'));
$case['SCHIFOMACCHINA'] = $tavolo->addContent((new Item('Schifomacchina'))->addFeature('type', 'case'));

function placeinto(Item $item, $parent, $line, $container = false) {
	global $case, $otherContainers;
	if($container) {
		if(isset($container[$item->getCode()])) {
			stop('Duplicate code', $line);
		}
		$otherContainers[$item->getCode()] = $item;
	}
	$where = preg_replace("/[^a-z]/", "", strtolower($parent));
	switch($where) {
		case 'zonablu':
		case 'zonarossa':
		case 'zonaground':
		case 'groot':
		case 'tavolo':
		case 'davanzale':
		case 'armadiol':
		case 'armadior':
		case 'armadios':
		case 'armadiod':
		case 'chernobyl':
			global $$where;
			/** @noinspection PhpUndefinedMethodInspection */
			$$where->addContent($item);
			return;
		case 'zonamrf':
		case 'mirafiori':
			global $mrf;
			/** @noinspection PhpUndefinedMethodInspection */
			$mrf->addContent($item);
			return;
		case 'perso':
		case 'persa':
		case 'duplicato':
			global $chernobyl;
			/** @noinspection PhpUndefinedMethodInspection */
			$chernobyl->addContent($item);
			return;
	}
	if(strstr($where, 'scatolaramrotte') > -1) {
		global $scatolaRAM;
		/** @noinspection PhpUndefinedMethodInspection */
		$scatolaRAM->addContent($item);
		return;
	}
	if(strstr($where, 'armadiol') > -1) {
		global $armadiol;
		/** @noinspection PhpUndefinedMethodInspection */
		$armadiol->addContent($item);
		return;
	}
	if(strstr($where, 'armadiod') > -1) {
		global $armadiod;
		/** @noinspection PhpUndefinedMethodInspection */
		$armadiod->addContent($item);
		return;
	}
	// TODO: handle this correctly
	if(strstr($where, 'computer') > -1) {
		global $armadiol;
		/** @noinspection PhpUndefinedMethodInspection */
		$armadiol->addContent($item);
		return;
	}
	$parent = trim($parent);
	if(isset($case[$parent])) {
		/** @noinspection PhpUndefinedMethodInspection */
		$case[$parent]->addContent($item);
		return;
	}
	if(isset($otherContainers[$parent])) {
		/** @noinspection PhpUndefinedMethodInspection */
		$otherContainers[$parent]->addContent($item);
		return;
	}
	stop('Unknown location: ' . $parent, $line);
	return null;
}

function colorify(Item $item, $color, $line) {
	$color = strtolower($color);
	switch($color) {
		case 'bianco':
			$item->addFeature('color', 'white');
			return;
		case 'nero':
			$item->addFeature('color', 'black');
			return;
		case 'grigio':
			$item->addFeature('color', 'grey');
			return;
		case 'blu':
			$item->addFeature('color', 'blue');
			return;
		case 'ingiallito':
			$item->addFeature('color', 'yellowed');
			return;
		case 'trasparente scuro':
			$item->addFeature('color', 'transparent-dark');
			return;
		case 'azzurro':
			$item->addFeature('color', 'lightblue');
			return;
		case 'rosa':
			$item->addFeature('color', 'pink');
			return;
		case 'marrone':
			$item->addFeature('color', 'brown');
			return;
		case 'grigio scuro':
			$item->addFeature('color', 'darkgrey');
			return;
	}
	stop('Unknown color: ' . $color, $line);
}

$files = ['monitor', 'ram', 'hdd', 'odd', 'input', 'cards', 'psu', 'fdd', 'other'];
$files = array_flip($files);
foreach($files as $file => $useless) {
	$handle = fopen('..' . DIRECTORY_SEPARATOR . 'converter' . DIRECTORY_SEPARATOR . $file . '.csv', "r");
	if(!$handle) {
		echo 'Cannot open ' . $file . '.csv';
		exit(1);
	}
	$files[$file] = $handle;
}

$header = fgets($files['monitor']);
$header = explode('|', $header);
// Whatever, it's not really needed...

$counter = 0;
while(($line = fgets($files['monitor'])) !== false) {
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));
	$in->addFeature('type', 'monitor');
	trim($pieces[1]) === '' ?: $in->addFeature('cib', trim($pieces[1]));
	trim($pieces[2]) === '' ?: $in->addFeature('cib-old', trim($pieces[2]));
	trim($pieces[3]) === '' ?: $in->addFeature('other-code', trim($pieces[3]));
	trim($pieces[4]) === '' ?: $in->addFeature('brand', trim($pieces[4]));
	($pieces[5] === '' || $pieces[5] === '-') ?: $in->addFeature('model', trim($pieces[5]));
	working($in, $pieces[6], $line);
	$pieces[7] === '-' ?: $in->addFeature('vga-ports-n', 1);
	$pieces[8] === '-' ?: $in->addFeature('dvi-ports-n', 1);
	$pieces[9] === '-' ?: ($in->addFeature('usb-ports-n', 2) && $in->addFeature('check', 'wrong-data') && $check++);
	$pieces[10] === '-' ?: $in->addFeature('hdmi-ports-n', 1);
	$pieces[11] === '-' ?: $in->addFeature('s-video-ports-n', 1);
	$pieces[12] === '' ?: $in->addFeature('notes', trim($pieces[12]));
	if($pieces[13] !== '') {
		$power = explode('/', $pieces[13], 2);
		if(count($power) === 2) {
			$in->addFeature('power-connector', 'barrel');
			$in->addFeature('psu-volt', (int) trim($power[0]));
			$in->addFeature('psu-ampere', (int) trim($power[1]));
		} else {
			$in->addFeature('power-connector', 'c13');
		}
	}
	$pieces[14] === '' ?: $in->addFeature('sn', trim($pieces[14]));
	placeinto($in, $pieces[15], $line);
	// TODO: handle "data di carico" (even though they're mostly random)
	if($pieces[17] === 'AreaIT') {
		$pieces[17] = 'Area IT';
	}
	$pieces[17] === '' ?: own($in, trim($pieces[17]), $line);
	$counter++;
}
$files['monitor'] = $counter;
unset($in);

$header = fgets($files['ram']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['ram'])) !== false) {
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));
	$in->addFeature('type', 'ram');
	$pieces[1] === '' ?: $in->addFeature('ram-type', strtolower(trim($pieces[1])));
	$pieces[2] === '' ?: $in->addFeature('ram-form-factor', strtolower(trim($pieces[2])));
	$pieces[3] === '' ?: $in->addFeature('frequency-hertz', $pieces[3] * 1000000);
	$pieces[4] === '' ?: $in->addFeature('capacity-byte', $pieces[4] * 1048576);
	working($in, $pieces[5], $line);
	if(trim($pieces[6]) !== '') {
		$pieces[6] = trim($pieces[6]);
		$subpieces = explode(' ', $pieces[6],2);
		assert(count($subpieces) > 0);
		if(count($subpieces) === 1) {
			if(substr($subpieces[0], 0, 5) === 'VS512') {
				$in->addFeature('model', $subpieces[0]);
			} else {
				$in->addFeature('brand', $subpieces[0]);
			}
		} else {
			$in->addFeature('brand', $subpieces[0]);
			$in->addFeature('model', $subpieces[1]);
		}
	}
	$pieces[7] = trim($pieces[7]);
		$pieces[7] === '' || $pieces[7] === '-' ?: $in->addFeature('sn', trim($pieces[7]));
	if(mb_substr($pieces[7], 0, 3) === '...' || mb_substr($pieces[7], 0, 1) === '…') {
		$in->addFeature('check', 'missing-data');
		$check++;
	}
	$pieces[8] === '' ?: $in->addFeature('notes', trim($pieces[8]));
	placeinto($in, $pieces[9], $line);
	$pieces[11] === '' ?: own($in, trim($pieces[11]), $line);

	if(strtoupper($pieces[9]) === 'EMILIA' || strtoupper($pieces[9]) === 'ROSETTA' || strtoupper($pieces[9]) === 'ROSITA') {
		$in->addFeature('ram-ecc', 'yes');
	}

	$counter++;
}
$files['ram'] = $counter;
unset($in);


$header = fgets($files['hdd']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['hdd'])) !== false) {
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));
	$in->addFeature('type', 'hdd');

	if(trim($pieces[0]) === 'HDD2') {
		$in->addFeature('check', 'wrong-data');
		$check++;
	}

	if(substr($pieces[11], 0, 5) === 'Perso') {
		placeinto($in, 'Chernobyl', $line);
		$in->addFeature('check', 'wrong-location');
		$check++;
	} else {
		placeinto($in, $pieces[11], $line);
	}

	switch(trim($pieces[1])) {
		case 'IDE':
			$in->addFeature('ide-ports-n', 1);
			$in->addFeature('hdd-odd-form-factor', '3.5');
			break;
		case 'SATA':
			$in->addFeature('sata-ports-n', 1);
			$in->addFeature('hdd-odd-form-factor', '3.5');
			break;
		case 'SATA (slim)':
			$in->addFeature('sata-ports-n', 1);
			$in->addFeature('hdd-odd-form-factor', '2.5-9.5mm');
			break;
		case 'MiniIDE':
			$in->addFeature('mini-ide-ports-n', 1);
			$in->addFeature('hdd-odd-form-factor', '2.5-9.5mm');
			break;
		case 'SCSI DB68':
			$in->addFeature('scsi-db68-ports-n', 1);
			$in->addFeature('hdd-odd-form-factor', '3.5');
			array_key_exists('check', $in->getFeatures()) ?: ($in->addFeature('check', 'wrong-location') && $check++);
			break;
		case 'SCSI':
			$in->addFeature('scsi-sca2-ports-n', 1);
			$in->addFeature('hdd-odd-form-factor', '3.5');
			array_key_exists('check', $in->getFeatures()) ?: ($in->addFeature('check', 'wrong-data') && $check++);
			break;
		default:
			stop('Unknown connector type', $line);
	}
	if(trim($pieces[2]) !== '') {
		$pieces[2] = trim($pieces[2]);
		$subpieces = explode(' ', $pieces[2],2);
		assert(count($subpieces) > 0);

		if($subpieces[0] === 'WesternDigital') {
			$subpieces[0] = 'Western Digital';
		}

		if(count($subpieces) === 1) {
			$in->addFeature('brand', $subpieces[0]);
		} else {
			$in->addFeature('brand', $subpieces[0]);
			$in->addFeature('model', $subpieces[1]);
		}
	}

	if($pieces[3] === '') {
		array_key_exists('check', $in->getFeatures()) ?: ($in->addFeature('check', 'missing-data') && $check++);
	} else {
		$thing = trim($pieces[3]);
		if(strpos($thing, ',') > -1) {
			$thing = str_replace(',', '.', $thing);
			$size = (int) ((double) $thing * 1000000000.0);
		} else {
			$size = trim($pieces[3]) * 1000000000;
		}
		$in->addFeature('capacity-decibyte', $size);
	}

	$pieces[4] === '' ?: $in->addFeature('spin-rate-rpm', (int) $pieces[4]);

	if($pieces[5] === '') {
		array_key_exists('check', $in->getFeatures()) ?: ($in->addFeature('check', 'missing-data') && $check++);
	} else {
		$in->addFeature('sn', $pieces[5]);
	}

	working($in, $pieces[6], $line);

	if($pieces[7] !== '' && $pieces[7] !== 'no') {
		$in->addFeature('data-erased', 'yes');
	}

	if($pieces[8] !== '') {
		switch(trim($pieces[8])) {
			case 'ok':
				$in->addFeature('surface-scan', 'pass');
				break;
			case 'no':
				$in->addFeature('surface-scan', 'fail');
				break;
			default:
				stop('Unknown badblocks value', $line);
		}
	}

	if($pieces[9] !== '') {
		switch(trim($pieces[9])) {
			case 'ok':
				$in->addFeature('smart-data', 'ok');
				break;
			case 'no':
				$in->addFeature('smart-data', 'fail');
				break;
			case 'ni':
				$in->addFeature('smart-data', 'old');
				break;
			default:
				stop('Unknown S.M.A.R.T. status value', $line);
		}
	}

	$pieces[10] === '' ?: $in->addFeature('notes', trim($pieces[10]));
	$pieces[13] === '' ?: own($in, trim($pieces[13]), $line);
	$counter++;
}
$files['hdd'] = $counter;
unset($in);

$header = fgets($files['odd']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['odd'])) !== false) {
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));
	$in->addFeature('type', 'odd');

	switch(trim($pieces[1])) {
		case 'IDE':
			$in->addFeature('ide-ports-n', 1);
			$in->addFeature('hdd-odd-form-factor', '5.25');
			break;
		case 'SATA':
			$in->addFeature('sata-ports-n', 1);
			$in->addFeature('hdd-odd-form-factor', '5.25');
			break;
		case 'SATA (slim)':
			$in->addFeature('sata-ports-n', 1);
			$in->addFeature('hdd-odd-form-factor', 'laptop-odd-standard');
			break;
		case 'Proprietario':
			$in->addFeature('hdd-odd-form-factor', 'laptop-odd-standard');
			break;
		default:
			stop('Unknown connector type', $line);
	}

	if($pieces[2] !== '') {
		$type = strtolower(trim($pieces[2])) . '-' . strtolower(trim($pieces[3]));
		$subpieces = explode(' ', $pieces[2],2);
		assert(count($subpieces) > 0);
		$in->addFeature('odd-type', $type);
	} else {
		array_key_exists('check', $in->getFeatures()) ?: ($in->addFeature('check', 'missing-data') && $check++);
	}


	$pieces[4] === '' ?: $in->addFeature('brand', $pieces[4]);
	$pieces[5] === '' ?: $in->addFeature('model', $pieces[5]);
	working($in, $pieces[6], $line);


	if($pieces[7] === '') {
		array_key_exists('check', $in->getFeatures()) ?: ($in->addFeature('check', 'missing-data') && $check++);
	} else {
		if($pieces[7] !== '-') {
			$in->addFeature('sn', $pieces[7]);
		}
	}

	$pieces[8] === '' ?: $in->addFeature('notes', trim($pieces[8]));
	$pieces[9] === '' ?: colorify($in, $pieces[9], $line);
	$pieces[12] === '' ?: own($in, trim($pieces[12]), $line);
	placeinto($in, $pieces[10], $line);
	$counter++;
}
$files['odd'] = $counter;
unset($in);

$header = fgets($files['input']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['input'])) !== false) {
	if(strstr($line, '!|||||||||||') > -1) {
		echo 'Skipping comment on keyboards...'.PHP_EOL;
		continue;
	}
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));

	if($pieces[1] === 'Mouse') {
		$in->addFeature('type', 'mouse');
	} else if($pieces[1] === 'Tastiera') {
		$in->addFeature('type', 'keyboard');
	} else {
		stop('Unknown type: ' . $pieces[1], $line);
	}

	switch(trim($pieces[2])) {
		case 'PS/2':
			$in->addFeature('ps2-ports-n', 1);
			break;
		case 'USB':
			$in->addFeature('usb-ports-n', 1);
			break;
		case 'Seriale':
			$in->addFeature('serial-ports-n', 1);
			break;
		case 'Wireless (in)':
			$in->addFeature('wireless-receiver', 'inside');
			break;
		case 'Wireless (near)':
			$in->addFeature('wireless-receiver', 'near');
			break;
		case 'Wireless (no)':
			$in->addFeature('wireless-receiver', 'missing');
			break;
		default:
			stop('Unknown connector type', $line);
	}

	$pieces[3] === '' ?: $in->addFeature('brand', $pieces[3]);
	$pieces[4] === '' ?: $in->addFeature('model', $pieces[4]);
	working($in, $pieces[5], $line);
	$pieces[6] === '' ?: colorify($in, $pieces[6], $line);
	$pieces[7] === '' ?: $in->addFeature('notes', trim($pieces[7]));
	($pieces[8] === '' || $pieces[8] === '-') ?: $in->addFeature('sn', $pieces[8]);
	placeinto($in, $pieces[9], $line);
	$pieces[11] === '' ?: own($in, trim($pieces[11]), $line);

	$missing = $pieces[9] === 'Perso' || $pieces[9] === 'Duplicato';
	$noserial = $pieces[8] === '';
	$wrongcode = $pieces[0]{1} === 'A';
	
	if($missing) {
		if($noserial || $wrongcode) {
			$in->addFeature('check', 'wrong-location-and-data');
			$check++;
		} else {
			$in->addFeature('check', 'missing-data');
			$check++;
		}
	} else if($noserial) {
		$in->addFeature('check', 'missing-data');
		$check++;
	} else if($wrongcode) {
		$in->addFeature('check', 'wrong-data');
		$check++;
	}

	$counter++;
}
$files['input'] = $counter;
unset($in);

$header = fgets($files['cards']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['cards'])) !== false) {
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));

	switch($pieces[1]) {
		case 'Audio':
			$in->addFeature('type', 'audio-card');
			break;
		case 'Ethernet':
			$in->addFeature('type', 'ethernet-card');
			break;
		case 'Modem':
			$in->addFeature('type', 'modem-card');
			break;
		case 'Grafica':
			$in->addFeature('type', 'graphics-card');
			$in->addFeature('has-gpu', 'yes');
			break;
		case 'USB':
		case 'Firewire':
		case 'Seriale':
		case '?':
			$in->addFeature('type', 'other-card');
			break;
		case 'WiFi':
			$in->addFeature('type', 'wifi-card');
			break;
		case 'SCSI':
			$in->addFeature('type', 'scsi-card');
			break;
		case 'Bracket':
			$in->addFeature('type', 'ports-bracket');
			break;
		default:
		stop('Unknown type: ' . $pieces[1], $line);
	}

	$hasports = false;
	// It's as wonderful and dreadful as it looks.
	$pieces[2]  === '' ?: $in->addFeature('ethernet-ports-10m-n', (int) $pieces[2]) && $hasports = true;
	$pieces[3]  === '' ?: $in->addFeature('ethernet-ports-100m-n', (int) $pieces[3]) && $hasports = true;
	$pieces[4]  === '' ?: $in->addFeature('ethernet-ports-1000m-n', (int) $pieces[4]) && $hasports = true;
	$pieces[5]  === '' ?: $in->addFeature('ethernet-ports-10base2-bnc-n', (int) $pieces[5]) && $hasports = true;
	$pieces[6]  === '' ?: $in->addFeature('ethernet-ports-10base5-aui-n', (int) $pieces[6]) && $hasports = true;
	$pieces[7]  === '' ?: $in->addFeature('rj11-ports-n', (int) $pieces[7]) && $hasports = true;
	$pieces[8]  === '' ?: $in->addFeature('midi-ports-n', (int) $pieces[8]) && $hasports = true;
	$pieces[9]  === '' ?: $in->addFeature('mini-jack-ports-n', (int) $pieces[9]) && $hasports = true;
	$pieces[10] === '' ?: $in->addFeature('rca-mono-ports-n', (int) $pieces[10]) && $hasports = true;
	$pieces[11] === '' ?: $in->addFeature('dvi-ports-n', (int) $pieces[11]) && $hasports = true;
	$pieces[12] === '' ?: $in->addFeature('dms-59-ports-n', (int) $pieces[12]) && $hasports = true;
	$pieces[13] === '' ?: $in->addFeature('vga-ports-n', (int) $pieces[13]) && $hasports = true;
	$pieces[14] === '' ?: $in->addFeature('s-video-ports-n', (int) $pieces[14]) && $hasports = true;
	$pieces[15] === '' ?: $in->addFeature('tv-out-ports-n', (int) $pieces[15]) && $hasports = true;
	$pieces[16] === '' ?: $in->addFeature('usb-ports-n', (int) $pieces[16]) && $hasports = true;
	$pieces[17] === '' ?: $in->addFeature('serial-ports-n', (int) $pieces[17]) && $hasports = true;
	$pieces[18] === '' ?: $in->addFeature('serial-db25-ports-n', (int) $pieces[18]) && $hasports = true;
	$pieces[19] === '' ?: $in->addFeature('firewire-ports-n', (int) $pieces[19]) && $hasports = true;
	$pieces[20] === '' ?: $in->addFeature('scsi-db68-ports-n', (int) $pieces[20]) && $hasports = true;

	switch($pieces[21]) {
		case 'PCI':
			$in->addFeature('pci-sockets-n', 1);
			break;
		case 'PCIe':
			$in->addFeature('pcie-sockets-n', 1);
			break;
		case 'AGP':
			$in->addFeature('agp-sockets-n', 1);
			break;
		case 'ISA':
			$in->addFeature('isa-sockets-n', 1);
			break;
		case 'Mini PCIe':
			$in->addFeature('mini-pcie-sockets-n', 1);
			break;
		case '-':
		case '':
			break;
		default:
			stop('Unknown connector: ' . $pieces[1], $line);
	}
	$pieces[22] === '' ?: $in->addFeature('brand', $pieces[22]);
	$pieces[23] === '' ?: $in->addFeature('model', $pieces[23]);
	$pieces[24] === '' ?: $in->addFeature('capacity-byte', 1024 * 1024 * (int) $pieces[24]); // video RAM (for graphics cards)
	working($in, $pieces[25], $line);
	($pieces[26] === '' || $pieces[26] === '-') ?: $in->addFeature('sn', $pieces[26]);
	$pieces[27] === '' ?: $in->addFeature('notes', trim($pieces[27]));
	placeinto($in, $pieces[28], $line);
	$pieces[30] === '' ?: own($in, trim($pieces[30]), $line);

	if($pieces[26] === '' || $pieces[21] === '' || !$hasports) {
		$in->addFeature('check', 'missing-data');
		$check++;
	}

	$counter++;
}
$files['cards'] = $counter;
unset($in);

$header = fgets($files['psu']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['psu'])) !== false) {
	$pieces = nuke($line, count($header));

	$missing = false;
	$in = new Item(trim($pieces[0]));

	if($in->getCode() === 'A64') {
		$in->addFeature('color', 'golden');
	}

	if(trim($pieces[1]) === '-' || $pieces[4] === 'Dell DA-2') {
		$in->addFeature('type', 'external-psu');
		$pieces[2] === '' ? $missing = true : $in->addFeature('psu-volt', (int) $pieces[2]);
		$pieces[3] === '' ? $missing = true : $in->addFeature('psu-ampere', (int) $pieces[3]); // sometimes these are fractional, but that isn't representable in database right now...
		if(trim($pieces[4]) === '?') {
			$missing = true;
		} else {
			switch(trim($pieces[4])) {
				case 'Barrel':
					$in->addFeature('power-connector', 'barrel');
					break;
				case 'Mini USB':
					$in->addFeature('power-connector', 'miniusb');
					break;
				case 'Proprietario':
					$in->addFeature('power-connector', 'proprietary');
					break;
				case 'Dell DA-2':
					$in->addFeature('power-connector', 'da-2');
					break;
				default:
					stop('Uknown external PSU type: ' . $pieces[4], $line);
			}
		}
	} else {
		$in->addFeature('type', 'psu');
		$in->addFeature('power-connector', 'c13');
		$pieces[1] === '?' ? $missing = true : $in->addFeature('power-rated-watt', (int) $pieces[1]);
		if($pieces[6] === '-') {
			stop('SATA port number set to "not applicable" for internal PSU', $line);
		} else {
			$pieces[6] === '' ? $missing = true : $in->addFeature('sata-ports-n', (int) $pieces[6]);
		}
		if(trim($pieces[5]) === '-') {
			stop('PCIe power pins set to "not applicable" for internal PSU', $line);
		} else {
			trim($pieces[5]) === '' ? $missing = true : $in->addFeature('pcie-power-pin-n', (int) trim($pieces[5]));
		}
		if(trim($pieces[4]) === '?') {
			$missing = true;
		} else {
			switch(trim($pieces[4])) {
				case 'ATX12V + 4 pin':
				case 'CFX12V + 4 pin':
				case 'LFX12V + 4 pin':
					$in->addFeature('psu-socket', 'atx12v-4pin');
					break;
				case 'ATX12V + 8 pin':
					$in->addFeature('psu-socket', 'atx12v-8pin');
					break;
				case 'ATX12V':
					$in->addFeature('psu-socket', 'atx12v');
					break;
				default:
					stop('Uknown internal PSU type: ' . $pieces[4], $line);
			}
			switch(trim($pieces[4])) {
				case 'CFX12V + 4 pin':
					$in->addFeature('psu-form-factor', 'cfx');
					break;
				case 'LFX12V + 4 pin':
					$in->addFeature('psu-form-factor', 'lfx');
					break;
				case 'ATX12V':
				case 'ATX12V + 4 pin':
				case 'ATX12V + 8 pin':
					$in->addFeature('psu-form-factor', 'atx');
					break;
				default:
					stop('Uknown internal PSU type (again): ' . $pieces[4], $line);
			}
		}
	}

	$pieces[7] === '' ?: $in->addFeature('brand', $pieces[7]);
	$pieces[8] === '' ?: $in->addFeature('brand-reseller', $pieces[8]);
	$pieces[9] === '' ?: $in->addFeature('model', $pieces[9]);
	working($in, $pieces[10], $line);
	($pieces[11] === '' || $pieces[11] === '-') ?: $in->addFeature('sn', $pieces[11]);
	$pieces[12] === '' ?: $in->addFeature('notes', trim($pieces[12]));
	placeinto($in, $pieces[13], $line);
	$pieces[15] === '' ?: own($in, trim($pieces[15]), $line);

	if($missing) {
		if($pieces[13] === 'Perso') {
			$in->addFeature('check', 'wrong-location-and-data');
		} else {
			$in->addFeature('check', 'missing-data');
		}
		$check++;
	}

	$counter++;
}
$files['psu'] = $counter;
unset($in);

$header = fgets($files['fdd']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['fdd'])) !== false) {
	$pieces = nuke($line, count($header));
	$in = new Item(trim($pieces[0]));

	if($in->getCode() === 'FL20') {
		$in->addFeature('type', 'zip-drive');
	} else {
		$in->addFeature('type', 'fdd');
	}

	$pieces[1] === '' ?: $in->addFeature('brand', $pieces[1]);
	$pieces[2] === '' ?: $in->addFeature('model', $pieces[2]);
	($pieces[3] === '' || $pieces[3] === '-') ?: $in->addFeature('sn', $pieces[3]);
	working($in, $pieces[4], $line);
	$pieces[5] === '' ?: $in->addFeature('notes', trim($pieces[5]));
	placeinto($in, $pieces[6], $line);
	$pieces[8] === '' ?: own($in, trim($pieces[8]), $line);

	$counter++;
}
$files['fdd'] = $counter;
unset($in);

$header = fgets($files['other']);
$header = explode('|', $header);
$counter = 0;
while(($line = fgets($files['other'])) !== false) {
	$pieces = nuke($line, count($header));
	if(trim($pieces[0]) === '') {
		continue;
	} else {
		$in = new Item(trim($pieces[0]));
	}

	$container = false;
	switch($pieces[1]) {
		// TODO: finish stuff
		case 'Mobo':
			$in->addFeature('type', 'motherboard');
			$container = true;
			break;
		case 'CPU':
			$in->addFeature('type', 'cpu');
			break;
		case 'Switch ethernet':
			$in->addFeature('type', 'network-switch');
			break;
		case 'Hub ethernet':
			$in->addFeature('type', 'network-hub');
			break;
		case 'Stampante':
			$in->addFeature('type', 'printer');
			break;
		case 'Scanner':
			$in->addFeature('type', 'scanner');
			break;
		default:
			$in->addFeature('type', 'other');
	}

	trim($pieces[2]) === '' ?: $in->addFeature('cib', trim($pieces[2]));
	$pieces[4] === '' ?: $in->addFeature('brand', $pieces[4]);
	$pieces[5] === '' ?: $in->addFeature('model', $pieces[5]);
	working($in, $pieces[6], $line);
	$pieces[7] === '' ?: colorify($in, $pieces[7], $line);
	($pieces[9] === '' || $pieces[9] === '-') ?: $in->addFeature('sn', $pieces[9]);
	$pieces[10] === '' ?: $in->addFeature('notes', trim($pieces[10]));
	placeinto($in, $pieces[11], $line, $container);
	$pieces[13] === '' ?: own($in, trim($pieces[13]), $line);

	$counter++;
}
$files['other'] = $counter;
unset($in);

echo 'Number of items (hopefully) correctly processed:'.PHP_EOL;
print_r($files);
$total = 0;
foreach($files as $counter) {
	$total += $counter;
}
printf("Items that need manual adjustments: %d of %d (%-4.1f%%)\n", $check, $total, 100*($check/$total));

//echo 'Owners statistics:'.PHP_EOL;
//arsort($owners);
//print_r($owners);

// Items are JSON encoded by the API, so this is quite legible:
//echo json_encode($polito, JSON_PRETTY_PRINT);
file_put_contents('../database.generated.json', json_encode($polito, JSON_PRETTY_PRINT));

// Stop here to see what has been parsed without importing into database
exit(0);

echo 'Connecting to database...'.PHP_EOL;
$dbr  = new \ReflectionObject($db);
$method = $dbr->getMethod('getPDO');
$method->setAccessible(true);
$pdo = $method->invoke($db);
/**
 * @var $pdo \PDO
 */
echo 'Rebuilding database...'.PHP_EOL;
$pdo->exec('DROP DATABASE IF EXISTS ' . DBNAME);
$pdo->exec('CREATE DATABASE ' . DBNAME . ' DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci');
$pdo->exec('USE ' . DBNAME);
$pdo->exec(file_get_contents('database.sql'));
$pdo->exec(file_get_contents('database-data.sql'));
$pdo->exec('INSERT INTO `User` (`UserID`, `Name`, `Password`, `Session`, `SessionExpiry`, `Enabled`) VALUES
(0,	\'IMPORT\', \'$2y$10$nrGjrh07hFNjzRDxCWrtfuo.Nug9.AdjcaYQuUMPQhVKRRrxz1Hsm\',	\'iR3YvecST9zvuSwyPohH4O8L4mWpj7Kk\', 1507496724,	1)');
$pdo->exec('INSERT INTO `User` (`UserID`, `Name`, `Password`, `Session`, `SessionExpiry`, `Enabled`) VALUES
(1,	\'asd\', \'$2y$10$nrGjrh07hFNjzRDxCWrtfuo.Nug9.AdjcaYQuUMPQhVKRRrxz1Hsm\',	\'asd\', 1507496724,	1)');

echo 'Importing Item tree...'.PHP_EOL;
$db->modificationDAO()->modifcationBegin(new WEEEOpen\Tarallo\User('IMPORT', 'asd'));
try {
	$db->itemDAO()->addItems($polito);
	$pdo->commit();
} catch(Exception $e) {
	$db->modificationDAO()->modificationRollback();
	throw $e;
}
// Doesn't work but import succeeds anyway
//$db->modificationDAO()->modificationCommit();

echo 'THE END'.PHP_EOL;
